{
    "domain": "thedailywtf.com", 
    "banned_by": null, 
    "media_embed": {}, 
    "subreddit": "Python", 
    "selftext_html": null, 
    "selftext": "", 
    "likes": null, 
    "saved": false, 
    "id": "kmur4", 
    "clicked": false, 
    "title": "Finally, a piece of Python code is featured in The Daily WTF ... :/ ", 
    "num_comments": 112, 
    "comments": [
        {
            "body": "What the heck is this even trying to do? It's like nightmare fuel for python. ", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "Vonney", 
            "replies": [
                {
                    "body": "For the curious/insane -- a co-worker &amp; I spent a few minutes figuring out what this actually does.\n\nIgnoring some odd stopping rules, this program performs a `maxchar`-permutation with repetition for the input set \"wlc\".\n\nFor a set `{'a', 'b', 'c'}`, a k-permutation with repetition is of cardinality 3^3, or 27. Note this isn't the same as a plain old permutation; a plain permutation would never yield `{a,a,a}`, which a permutation with repetition will. I don't think Python has a builtin for a permutation with repetition.\n\nThe stopping rules are baffling. If List = 1, the program only halts quickly if a 9 is in the set wlc. If List = 2 or 4, it only halts quickly if z is in wlc. If List = 3, 5, or 6, it only halts quickly if a Z is in wlc. Otherwise, all `|wlc|^15` loops are performed.\n\nAlso, the halting character (z, Z, or 9) *must* be at the end of the set in order to achieve a proper permutation with repetition. For example, we perform a 2-permutation with repetition on [a, b, Z], the set achieved is:\n`{(a,a), (a,b), (a,Z), (b,a), (b,b), (b,Z), (Z,a), (Z,b), (Z,Z)}` -- correct, as it is of cardinality 3^2.\n\nIf, however, we give this program the set [a, Z, b], the output is limited to:\n`{(a,a), (a,b), (a,Z), (Z,a), (Z,b), (Z,Z)}`. Totally broken.\n\nThe other variables: verbose is a bool that controls whether each choice is printed, and txt is an output file where each choice is written.\n\nMy co-worker &amp; I surmised that it appears to be a hopeless attempt to print out all passwords containing some set of characters -- noting that the password must always contain a 9, Z, or z, or else the program runs for a long time.\n\nEDIT: messed up the halting explanation.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "heyhermano", 
                    "replies": [
                        {
                            "body": "&gt; I don't think Python has a builtin for a permutation with repetition.\n\n    [x for x in itertools.product(['a', 'Z', 'a'], repeat=3]\n\n\n*edit*\n\nMore generally:\n\n    func = lambda x: [p for p in itertools.product(x, repeat=len(x))]\n    func(['a', 'Z', 'a'])\n\n*edit2*\n\nSeveral have noticed, the list comprehension basically simplifies to:\n\n    func = lambda x: list(itertools.product(x, repeat=len(x))", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "krunk7", 
                            "replies": [
                                {
                                    "body": "    func = lambda x: list(itertools.product(x, repeat=len(x)))\n", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "Justinsaccount", 
                                    "replies": [
                                        {
                                            "body": "If you want to have some golfing fun, try to make it halt early if z, Z, or 9 isn't strictly the last character, and to run `|x|^15` times if z, Z, or 9 is not in x.\n\nHow short can we make an accurate reproduction, bugs and all?", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "heyhermano", 
                                            "banned_by": null, 
                                            "downs": 2, 
                                            "created": 1316632338.0, 
                                            "created_utc": 1316632338.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you want to have some golfing fun, try to make it halt early if z, Z, or 9 isn&amp;#39;t strictly the last character, and to run &lt;code&gt;|x|^15&lt;/code&gt; times if z, Z, or 9 is not in x.&lt;/p&gt;\n\n&lt;p&gt;How short can we make an accurate reproduction, bugs and all?&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2lk1gh", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 11, 
                                            "id": "c2lk40j", 
                                            "name": "t1_c2lk40j"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316631855.0, 
                                    "created_utc": 1316631855.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;func = lambda x: list(itertools.product(x, repeat=len(x)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljs45", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 12, 
                                    "id": "c2lk1gh", 
                                    "name": "t1_c2lk1gh"
                                }, 
                                {
                                    "body": "It's no builtin, but you've done it in one line. Congrats ;-)\n\nAh, but do note: your solution performs what the code *attempts* to do. It doesn't actually horribly fail the way this code does. Bonus points if you can do that in one line!", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "heyhermano", 
                                    "replies": [
                                        {
                                            "body": "You have failed by not failing hard enough. ", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "Vonney", 
                                            "banned_by": null, 
                                            "downs": 4, 
                                            "created": 1316635960.0, 
                                            "created_utc": 1316635960.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You have failed by not failing hard enough. &lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2ljt7t", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 12, 
                                            "id": "c2lknli", 
                                            "name": "t1_c2lknli"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 6, 
                                    "created": 1316630294.0, 
                                    "created_utc": 1316630294.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s no builtin, but you&amp;#39;ve done it in one line. Congrats ;-)&lt;/p&gt;\n\n&lt;p&gt;Ah, but do note: your solution performs what the code &lt;em&gt;attempts&lt;/em&gt; to do. It doesn&amp;#39;t actually horribly fail the way this code does. Bonus points if you can do that in one line!&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljs45", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 33, 
                                    "id": "c2ljt7t", 
                                    "name": "t1_c2ljt7t"
                                }, 
                                {
                                    "body": "&gt;    [x for x in itertools.product(['a', 'Z', 'a'], repeat=3]\n\nWouldn't this be simpler:\n\n    list(itertools.product(['a', 'Z', 'a'], repeat=3))\n\nIn general [x for x in xs] means list(xs)", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "cabalamat", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316703175.0, 
                                    "created_utc": 1316703175.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;[x for x in itertools.product([&amp;#39;a&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;a&amp;#39;], repeat=3]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Wouldn&amp;#39;t this be simpler:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list(itertools.product([&amp;#39;a&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;a&amp;#39;], repeat=3))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In general [x for x in xs] means list(xs)&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljs45", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 3, 
                                    "id": "c2lrea7", 
                                    "name": "t1_c2lrea7"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 7, 
                            "created": 1316630082.0, 
                            "created_utc": 1316630082.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t think Python has a builtin for a permutation with repetition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;[x for x in itertools.product([&amp;#39;a&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;a&amp;#39;], repeat=3]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;edit&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;More generally:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func = lambda x: [p for p in itertools.product(x, repeat=len(x))]\nfunc([&amp;#39;a&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;a&amp;#39;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;edit2&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Several have noticed, the list comprehension basically simplifies to:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func = lambda x: list(itertools.product(x, repeat=len(x))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljlla", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 53, 
                            "id": "c2ljs45", 
                            "name": "t1_c2ljs45"
                        }, 
                        {
                            "body": "Nice. Better than [my attempt](http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljp4l) at decoding that monster.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "gfixler", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316629639.0, 
                            "created_utc": 1316629639.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice. Better than &lt;a href=\"http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljp4l\"&gt;my attempt&lt;/a&gt; at decoding that monster.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljlla", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 6, 
                            "id": "c2ljpry", 
                            "name": "t1_c2ljpry"
                        }, 
                        {
                            "body": "&gt; I don't think Python has a builtin for a permutation with repetition.\n\nI think it does now in itertools.combinations_with_replacement()?  http://docs.python.org/library/itertools.html#itertools.combinations_with_replacement (new in 2.7, though).", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "simtel20", 
                            "replies": [
                                {
                                    "body": "As I said elsewhere, this is incorrect.\n\nP(5,2) over {1,2,3,4,5} with replacement has cardinality 2^5. C(5,2) with replacement over the same set has cardinality C(n+k-1,k), or C(6,2) = 15. A combination with replacement is not the same as a permutation with replacement.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "heyhermano", 
                                    "banned_by": null, 
                                    "downs": 2, 
                                    "created": 1316629724.0, 
                                    "created_utc": 1316629724.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As I said elsewhere, this is incorrect.&lt;/p&gt;\n\n&lt;p&gt;P(5,2) over {1,2,3,4,5} with replacement has cardinality 2&lt;sup&gt;5.&lt;/sup&gt; C(5,2) with replacement over the same set has cardinality C(n+k-1,k), or C(6,2) = 15. A combination with replacement is not the same as a permutation with replacement.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljngc", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 5, 
                                    "id": "c2ljq86", 
                                    "name": "t1_c2ljq86"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 2, 
                            "created": 1316629202.0, 
                            "created_utc": 1316629202.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t think Python has a builtin for a permutation with repetition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I think it does now in itertools.combinations_with_replacement()?  &lt;a href=\"http://docs.python.org/library/itertools.html#itertools.combinations_with_replacement\"&gt;http://docs.python.org/library/itertools.html#itertools.combinations_with_replacement&lt;/a&gt; (new in 2.7, though).&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljlla", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 5, 
                            "id": "c2ljngc", 
                            "name": "t1_c2ljngc"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 7, 
                    "created": 1316628855.0, 
                    "created_utc": 1316628855.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For the curious/insane -- a co-worker &amp;amp; I spent a few minutes figuring out what this actually does.&lt;/p&gt;\n\n&lt;p&gt;Ignoring some odd stopping rules, this program performs a &lt;code&gt;maxchar&lt;/code&gt;-permutation with repetition for the input set &amp;quot;wlc&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;For a set &lt;code&gt;{&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;}&lt;/code&gt;, a k-permutation with repetition is of cardinality 3&lt;sup&gt;3,&lt;/sup&gt; or 27. Note this isn&amp;#39;t the same as a plain old permutation; a plain permutation would never yield &lt;code&gt;{a,a,a}&lt;/code&gt;, which a permutation with repetition will. I don&amp;#39;t think Python has a builtin for a permutation with repetition.&lt;/p&gt;\n\n&lt;p&gt;The stopping rules are baffling. If List = 1, the program only halts quickly if a 9 is in the set wlc. If List = 2 or 4, it only halts quickly if z is in wlc. If List = 3, 5, or 6, it only halts quickly if a Z is in wlc. Otherwise, all &lt;code&gt;|wlc|^15&lt;/code&gt; loops are performed.&lt;/p&gt;\n\n&lt;p&gt;Also, the halting character (z, Z, or 9) &lt;em&gt;must&lt;/em&gt; be at the end of the set in order to achieve a proper permutation with repetition. For example, we perform a 2-permutation with repetition on [a, b, Z], the set achieved is:\n&lt;code&gt;{(a,a), (a,b), (a,Z), (b,a), (b,b), (b,Z), (Z,a), (Z,b), (Z,Z)}&lt;/code&gt; -- correct, as it is of cardinality 3&lt;sup&gt;2.&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;If, however, we give this program the set [a, Z, b], the output is limited to:\n&lt;code&gt;{(a,a), (a,b), (a,Z), (Z,a), (Z,b), (Z,Z)}&lt;/code&gt;. Totally broken.&lt;/p&gt;\n\n&lt;p&gt;The other variables: verbose is a bool that controls whether each choice is printed, and txt is an output file where each choice is written.&lt;/p&gt;\n\n&lt;p&gt;My co-worker &amp;amp; I surmised that it appears to be a hopeless attempt to print out all passwords containing some set of characters -- noting that the password must always contain a 9, Z, or z, or else the program runs for a long time.&lt;/p&gt;\n\n&lt;p&gt;EDIT: messed up the halting explanation.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2liqvx", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 58, 
                    "id": "c2ljlla", 
                    "name": "t1_c2ljlla"
                }, 
                {
                    "body": "make pythoners/pythonians/pythonites feel queezy?", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": "", 
                    "author": "rikAtee", 
                    "replies": [
                        {
                            "body": "pythonistas", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "ares623", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316638256.0, 
                            "created_utc": 1316638256.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;pythonistas&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljcio", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 13, 
                            "id": "c2lkzzw", 
                            "name": "t1_c2lkzzw"
                        }, 
                        {
                            "body": "_queasy_", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "tricolon", 
                            "banned_by": null, 
                            "downs": 2, 
                            "created": 1316632378.0, 
                            "created_utc": 1316632378.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;queasy&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljcio", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 13, 
                            "id": "c2lk48r", 
                            "name": "t1_c2lk48r"
                        }, 
                        {
                            "body": "You mean as opposed to a big lump of for loops squeezed into five lines?", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": "", 
                            "author": "Howardula", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316658804.0, 
                            "created_utc": 1316658804.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You mean as opposed to a big lump of for loops squeezed into five lines?&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljcio", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": "Biological modeling and other stuff", 
                            "link_id": "t3_kmur4", 
                            "ups": 1, 
                            "id": "c2lnv8f", 
                            "name": "t1_c2lnv8f"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316627144.0, 
                    "created_utc": 1316627144.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;make pythoners/pythonians/pythonites feel queezy?&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2liqvx", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": ".py", 
                    "link_id": "t3_kmur4", 
                    "ups": 9, 
                    "id": "c2ljcio", 
                    "name": "t1_c2ljcio"
                }, 
                {
                    "body": "I think I figured it out. Basically, you pass in a word for wlc. Each loop of the 15 nested loops is there to loop from 0 to len(wlc), basically so it can loop through the letters of the word. The reason there are 15 loops is so it can do this loop for each character in the word (but only up to strings of length 15, so watch your wlc length!), so it can concatenate the many loops through wlc back up to create all words possible out of those letters. It checks the length of the word in the innermost loop - let's call that *n* - and only uses the index values of the innermost *n* loops to do the character lookups in wlc. Basically, if you gave it the word 'cat', it would start writing out to the file:\n\n    ccc (indices 13, 14, and 15, all at 0)\n    cca (index 15 increments)\n    cct (ditto)\n    cac (index 15 loops to 0, index 14 increments)\n    etc...\n\nOf course, the maxchar argument screws everything up, because while you can specify a length shorter than len(wlc), effectively clipping wlc's length to only the left *maxchar* characters, you can also specify a length longer than len(wlc), which would add in more loops, so a wlc of 'cat' with a maxchar of 4 would end up giving you combinations like 'cata' and 'ttct', and never output only 'cat' (if that matters).\n\nAnyway, we've now concatenated a string in the innermost loop. After a quick check of the verbose argument to see if it should also be printing these to standard output, it writes the concatenated word into a text file. Now we move on to Loop, an argument that can be a number from 1 to 6, inclusive. This is where my head melts a bit.\n\nEach of the 6 values for Loop is linked to a particular character. For example, a Loop of 1 is linked with a character of '9', while 4 is linked with 'z'. Before all the loops started, the code created lword, which is an array of maxchar 0s. If you give maxchar of 6, lword will be [0, 0, 0, 0, 0, 0]. At the end of the innermost loop, and let's say Loop is 1, it will fill lword with 9s (i.e. [9, 9, 9, 9, 9, 9]), then compare it to a string of the word it built up earlier in the innermost loop. Hilariously, it str()s both of these in the comparison, which does nothing. Also, it says i=0 before all these checks, but then uses i only for for-in loops, so that initialization was also pointless. Only if this check works does it set end to 1 and break its way Kool-Aid Man style out of all the loops. This is the only thing that will end this, so if you pass in 'cat' for wlc, maxchar of 3 (which would be 'correct' - wlc is 3 letters long), a List of 4, then it will write out every combination of c, a, and t to text file, then do it again more than 530,000 more times, each time writing out the same set of permutations of c, a, and t to the text file. It would not quit early, because str(['z', 'z', 'z']) (set by List being 4) would never equal str(['c', 'a', 't']), nor str(['t', 't', 't']), nor str(['t', 'a', 'c']), nor any other combination of those letters.\n\nIn short, the whole thing makes no frigging sense whatsoever.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "gfixler", 
                    "replies": [
                        {
                            "body": "&gt; In short, the whole thing makes no frigging sense whatsoever.\n\nAwesome TL;DR :D Thanks!", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "Vonney", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316635773.0, 
                            "created_utc": 1316635773.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;In short, the whole thing makes no frigging sense whatsoever.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Awesome TL;DR :D Thanks!&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljp4l", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 12, 
                            "id": "c2lkmid", 
                            "name": "t1_c2lkmid"
                        }, 
                        {
                            "body": "&gt; Only if this check works does it set end to 1 and break its way Kool-Aid Man style out of all the loops.\n\nThanks to you, I just went back and read the end of the function and said \"OH YEAH.\" out loud.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "spoolio", 
                            "banned_by": null, 
                            "downs": 1, 
                            "created": 1316656594.0, 
                            "created_utc": 1316656594.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Only if this check works does it set end to 1 and break its way Kool-Aid Man style out of all the loops.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks to you, I just went back and read the end of the function and said &amp;quot;OH YEAH.&amp;quot; out loud.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljp4l", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 3, 
                            "id": "c2lnjds", 
                            "name": "t1_c2lnjds"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 3, 
                    "created": 1316629520.0, 
                    "created_utc": 1316629520.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think I figured it out. Basically, you pass in a word for wlc. Each loop of the 15 nested loops is there to loop from 0 to len(wlc), basically so it can loop through the letters of the word. The reason there are 15 loops is so it can do this loop for each character in the word (but only up to strings of length 15, so watch your wlc length!), so it can concatenate the many loops through wlc back up to create all words possible out of those letters. It checks the length of the word in the innermost loop - let&amp;#39;s call that &lt;em&gt;n&lt;/em&gt; - and only uses the index values of the innermost &lt;em&gt;n&lt;/em&gt; loops to do the character lookups in wlc. Basically, if you gave it the word &amp;#39;cat&amp;#39;, it would start writing out to the file:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ccc (indices 13, 14, and 15, all at 0)\ncca (index 15 increments)\ncct (ditto)\ncac (index 15 loops to 0, index 14 increments)\netc...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, the maxchar argument screws everything up, because while you can specify a length shorter than len(wlc), effectively clipping wlc&amp;#39;s length to only the left &lt;em&gt;maxchar&lt;/em&gt; characters, you can also specify a length longer than len(wlc), which would add in more loops, so a wlc of &amp;#39;cat&amp;#39; with a maxchar of 4 would end up giving you combinations like &amp;#39;cata&amp;#39; and &amp;#39;ttct&amp;#39;, and never output only &amp;#39;cat&amp;#39; (if that matters).&lt;/p&gt;\n\n&lt;p&gt;Anyway, we&amp;#39;ve now concatenated a string in the innermost loop. After a quick check of the verbose argument to see if it should also be printing these to standard output, it writes the concatenated word into a text file. Now we move on to Loop, an argument that can be a number from 1 to 6, inclusive. This is where my head melts a bit.&lt;/p&gt;\n\n&lt;p&gt;Each of the 6 values for Loop is linked to a particular character. For example, a Loop of 1 is linked with a character of &amp;#39;9&amp;#39;, while 4 is linked with &amp;#39;z&amp;#39;. Before all the loops started, the code created lword, which is an array of maxchar 0s. If you give maxchar of 6, lword will be [0, 0, 0, 0, 0, 0]. At the end of the innermost loop, and let&amp;#39;s say Loop is 1, it will fill lword with 9s (i.e. [9, 9, 9, 9, 9, 9]), then compare it to a string of the word it built up earlier in the innermost loop. Hilariously, it str()s both of these in the comparison, which does nothing. Also, it says i=0 before all these checks, but then uses i only for for-in loops, so that initialization was also pointless. Only if this check works does it set end to 1 and break its way Kool-Aid Man style out of all the loops. This is the only thing that will end this, so if you pass in &amp;#39;cat&amp;#39; for wlc, maxchar of 3 (which would be &amp;#39;correct&amp;#39; - wlc is 3 letters long), a List of 4, then it will write out every combination of c, a, and t to text file, then do it again more than 530,000 more times, each time writing out the same set of permutations of c, a, and t to the text file. It would not quit early, because str([&amp;#39;z&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;z&amp;#39;]) (set by List being 4) would never equal str([&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;t&amp;#39;]), nor str([&amp;#39;t&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;t&amp;#39;]), nor str([&amp;#39;t&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;]), nor any other combination of those letters.&lt;/p&gt;\n\n&lt;p&gt;In short, the whole thing makes no frigging sense whatsoever.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2liqvx", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 16, 
                    "id": "c2ljp4l", 
                    "name": "t1_c2ljp4l"
                }
            ], 
            "banned_by": null, 
            "downs": 5, 
            "created": 1316622950.0, 
            "created_utc": 1316622950.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What the heck is this even trying to do? It&amp;#39;s like nightmare fuel for python. &lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 60, 
            "id": "c2liqvx", 
            "name": "t1_c2liqvx"
        }, 
        {
            "body": "I'm an amateur programmer, and I just have to say that I am shocked that there are \"professionals\" writing this stuff...", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "the-cakeboss", 
            "replies": [
                {
                    "body": "You need to realize that employers want the least expensive programmer they can hire. I think in this case they succeeded beyond their wildest expectations.\n\nThis reminds me of an astronaut joke -- they asked John Glenn what he was thinking about while waiting on top of the rocket. He said, \"All I could think about was that everything in the rocket was made by the lowest bidder.\"\n", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "lutusp", 
                    "replies": [
                        {
                            "body": "&gt;You need to realize that **some** employers want the least expensive programmer they can hire.\n\nFTFY", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "a_redditor", 
                            "replies": [
                                {
                                    "body": "Not really -- not in a survival-of-the-fittest economic environment. No one is going to hire a more expensive programmer than the task demands. As one example, Microsoft is famous for hiring people who write incredibly bad code: [Ending Microsoft\u2019s Cowboy Spaghetti Code](http://www.vexite.com/2005/ending-microsofts-cowboy-spaghetti-code-culture/) They had everything to lose, but they did it anyway.\n", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "lutusp", 
                                    "replies": [
                                        {
                                            "body": "Well, companies have different levels of foresight, and have different strategies.  For some, they believe that having better-written apps will make them more money (and thus, better programmers are \"less expensive\").  That's not what the OP was talking about, though.", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "xiongchiamiov", 
                                            "banned_by": null, 
                                            "downs": 0, 
                                            "created": 1316668224.0, 
                                            "created_utc": 1316668224.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, companies have different levels of foresight, and have different strategies.  For some, they believe that having better-written apps will make them more money (and thus, better programmers are &amp;quot;less expensive&amp;quot;).  That&amp;#39;s not what the OP was talking about, though.&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2lmtdc", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 3, 
                                            "id": "c2lp1s6", 
                                            "name": "t1_c2lp1s6"
                                        }, 
                                        {
                                            "body": "Is this a serious post? From the article:\n\n&gt; In the past, Microsoft let thousands of software engineers create their own code. As the chief architect, what Bill Gates does is filter those programs that produce the least bugs to get into the base code of Windows. Engineers would stitch those chunks of codes to create the intended program afterwards; hence, inadvertently creating spaghetti codes. Programmers literally browse thousand lines of codes if a bug pops up, making bug hunting a nightmare.\n\nWhat?", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "brownmatt", 
                                            "replies": [
                                                {
                                                    "body": "&gt; Is this a serious post?\n\nAre you married to your position?\n\n[Battling Google, Microsoft\nChanges How It Builds Software](http://www.site.uottawa.ca/~ssome/Cours/SEG3202/microsoftImportanceOfDesign.html)\n\nA quote: \"Longhorn was irredeemable because Microsoft engineers were building it just as they had always built software. Throughout its history, Microsoft had let thousands of programmers each produce their own piece of computer code, then stitched it together into one sprawling program. Now, Mr. Allchin argued, the jig was up. Microsoft needed to start over.\"\n", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "lutusp", 
                                                    "replies": [
                                                        {
                                                            "body": "I'm not so sure that the WSJ really understands how software is built, or that their metaphor is meant to be taken seriously by those who do. It's quite a non-sensical statement that the software was \"stitched together into one sprawling program\".", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "brownmatt", 
                                                            "replies": [
                                                                {
                                                                    "body": "&gt; I'm not so sure that the WSJ really understands how software is built ...\n\nIt really doesn't matter, because they relied on the views of someone who does know -- Jim Allchin, who had nothing to gain and everything to lose by decrying Microsoft's coding practices.\n\n&gt; It's quite a non-sensical statement that the software was \"stitched together into one sprawling program\".\n\nYes -- unless it happens to be true. A bunch of coders working independently, writing modules they hope will turn out to function together, can't be compared to a tightly organized group working toward a single conception of the outcome -- the conventional expression of good coding practice.\n", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "lutusp", 
                                                                    "banned_by": null, 
                                                                    "downs": 1, 
                                                                    "created": 1316938219.0, 
                                                                    "created_utc": 1316938219.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m not so sure that the WSJ really understands how software is built ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It really doesn&amp;#39;t matter, because they relied on the views of someone who does know -- Jim Allchin, who had nothing to gain and everything to lose by decrying Microsoft&amp;#39;s coding practices.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;It&amp;#39;s quite a non-sensical statement that the software was &amp;quot;stitched together into one sprawling program&amp;quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes -- unless it happens to be true. A bunch of coders working independently, writing modules they hope will turn out to function together, can&amp;#39;t be compared to a tightly organized group working toward a single conception of the outcome -- the conventional expression of good coding practice.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2m04n0", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 2, 
                                                                    "id": "c2mf2wk", 
                                                                    "name": "t1_c2mf2wk"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 0, 
                                                            "created": 1316784402.0, 
                                                            "created_utc": 1316784402.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not so sure that the WSJ really understands how software is built, or that their metaphor is meant to be taken seriously by those who do. It&amp;#39;s quite a non-sensical statement that the software was &amp;quot;stitched together into one sprawling program&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2lxan4", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 1, 
                                                            "id": "c2m04n0", 
                                                            "name": "t1_c2m04n0"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 1, 
                                                    "created": 1316745872.0, 
                                                    "created_utc": 1316745872.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Is this a serious post?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Are you married to your position?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.site.uottawa.ca/%7Essome/Cours/SEG3202/microsoftImportanceOfDesign.html\"&gt;Battling Google, Microsoft\nChanges How It Builds Software&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A quote: &amp;quot;Longhorn was irredeemable because Microsoft engineers were building it just as they had always built software. Throughout its history, Microsoft had let thousands of programmers each produce their own piece of computer code, then stitched it together into one sprawling program. Now, Mr. Allchin argued, the jig was up. Microsoft needed to start over.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lx6t8", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 2, 
                                                    "id": "c2lxan4", 
                                                    "name": "t1_c2lxan4"
                                                }
                                            ], 
                                            "banned_by": null, 
                                            "downs": 0, 
                                            "created": 1316744996.0, 
                                            "created_utc": 1316744996.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is this a serious post? From the article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;In the past, Microsoft let thousands of software engineers create their own code. As the chief architect, what Bill Gates does is filter those programs that produce the least bugs to get into the base code of Windows. Engineers would stitch those chunks of codes to create the intended program afterwards; hence, inadvertently creating spaghetti codes. Programmers literally browse thousand lines of codes if a bug pops up, making bug hunting a nightmare.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What?&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2lmtdc", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 1, 
                                            "id": "c2lx6t8", 
                                            "name": "t1_c2lx6t8"
                                        }, 
                                        {
                                            "body": "Yeah, but look at where MS is today\u2026 MS paid the price for their shortsighted coding practices. Their codebase is a mess and most of their projects are death marches to nowhere. Every single goddamn Raymond Chen blog post should come with a note at the end that says, \"And this is why no matter how good of an idea it sounds like to do a quick and dirty kludge, you should not do it under penalty of death.\"", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "earthboundkid", 
                                            "replies": [
                                                {
                                                    "body": "&gt;  Yeah, but look at where MS is today\u2026\n\nYep. They paid the price. Their initial impulse was to hire the least expensive help they could find, and they got what they paid for.\n", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "lutusp", 
                                                    "banned_by": null, 
                                                    "downs": 2, 
                                                    "created": 1316688342.0, 
                                                    "created_utc": 1316688342.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Yeah, but look at where MS is today\u2026&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yep. They paid the price. Their initial impulse was to hire the least expensive help they could find, and they got what they paid for.&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lp1l2", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 4, 
                                                    "id": "c2lq90w", 
                                                    "name": "t1_c2lq90w"
                                                }
                                            ], 
                                            "banned_by": null, 
                                            "downs": 1, 
                                            "created": 1316668172.0, 
                                            "created_utc": 1316668172.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, but look at where MS is today\u2026 MS paid the price for their shortsighted coding practices. Their codebase is a mess and most of their projects are death marches to nowhere. Every single goddamn Raymond Chen blog post should come with a note at the end that says, &amp;quot;And this is why no matter how good of an idea it sounds like to do a quick and dirty kludge, you should not do it under penalty of death.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2lmtdc", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 2, 
                                            "id": "c2lp1l2", 
                                            "name": "t1_c2lp1l2"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 7, 
                                    "created": 1316651286.0, 
                                    "created_utc": 1316651286.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not really -- not in a survival-of-the-fittest economic environment. No one is going to hire a more expensive programmer than the task demands. As one example, Microsoft is famous for hiring people who write incredibly bad code: &lt;a href=\"http://www.vexite.com/2005/ending-microsofts-cowboy-spaghetti-code-culture/\"&gt;Ending Microsoft\u2019s Cowboy Spaghetti Code&lt;/a&gt; They had everything to lose, but they did it anyway.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2lm303", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 4, 
                                    "id": "c2lmtdc", 
                                    "name": "t1_c2lmtdc"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 1, 
                            "created": 1316645833.0, 
                            "created_utc": 1316645833.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You need to realize that &lt;strong&gt;some&lt;/strong&gt; employers want the least expensive programmer they can hire.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;FTFY&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljepx", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 11, 
                            "id": "c2lm303", 
                            "name": "t1_c2lm303"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 11, 
                    "created": 1316627554.0, 
                    "created_utc": 1316627554.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You need to realize that employers want the least expensive programmer they can hire. I think in this case they succeeded beyond their wildest expectations.&lt;/p&gt;\n\n&lt;p&gt;This reminds me of an astronaut joke -- they asked John Glenn what he was thinking about while waiting on top of the rocket. He said, &amp;quot;All I could think about was that everything in the rocket was made by the lowest bidder.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lj59o", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 43, 
                    "id": "c2ljepx", 
                    "name": "t1_c2ljepx"
                }, 
                {
                    "body": "Professional just means someone's paying you. :)", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "doitincircles", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316752818.0, 
                    "created_utc": 1316752818.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Professional just means someone&amp;#39;s paying you. :)&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lj59o", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 2, 
                    "id": "c2ly4hx", 
                    "name": "t1_c2ly4hx"
                }
            ], 
            "banned_by": null, 
            "downs": 6, 
            "created": 1316625751.0, 
            "created_utc": 1316625751.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m an amateur programmer, and I just have to say that I am shocked that there are &amp;quot;professionals&amp;quot; writing this stuff...&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 26, 
            "id": "c2lj59o", 
            "name": "t1_c2lj59o"
        }, 
        {
            "body": "On python-forum.org, we had someone ask for help with their script a while ago, and they posted code extremely similar to this, saying they got it from somewhere else.\n\nHere is the thread: http://www.python-forum.org/pythonforum/viewtopic.php?f=1&amp;t=27111. In the .py file in the .zip attachment, there is a function which looks pretty much identical to the code posted.\n\nI wonder was the person who originally wrote the code in the linked article the same person who came to python-forum.org for help, or did he just rip the code from there?\n\nEDIT: [This](http://www.governmentsecurity.org/forum/index.php?showtopic=26829) appears to be where the code originally surfaced. I wonder does the guy know his code is famous...", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "bunburya", 
            "replies": [
                {
                    "body": "That thing is clearly identical.\n\nNow it exists in 2 places.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "abledanger", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316641403.0, 
                    "created_utc": 1316641403.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That thing is clearly identical.&lt;/p&gt;\n\n&lt;p&gt;Now it exists in 2 places.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lju2w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 3, 
                    "id": "c2llgw4", 
                    "name": "t1_c2llgw4"
                }, 
                {
                    "body": "Also, [this](http://timdijkstra.com/word/source.php) looks related.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "st0vepipe", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316701579.0, 
                    "created_utc": 1316701579.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also, &lt;a href=\"http://timdijkstra.com/word/source.php\"&gt;this&lt;/a&gt; looks related.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lju2w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 2, 
                    "id": "c2lr7cb", 
                    "name": "t1_c2lr7cb"
                }, 
                {
                    "body": "I dunno, but I love the reaction from one of the participants: \"Holy shit on a stick.\"", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "ebneter", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316640377.0, 
                    "created_utc": 1316640377.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I dunno, but I love the reaction from one of the participants: &amp;quot;Holy shit on a stick.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lju2w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 1, 
                    "id": "c2llbks", 
                    "name": "t1_c2llbks"
                }, 
                {
                    "body": "They're bashing Gray Hat Python in that forum! It's such a fantastic book, i feel like they didn't even give it a chance.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "BathroomEyes", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316668846.0, 
                    "created_utc": 1316668846.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;They&amp;#39;re bashing Gray Hat Python in that forum! It&amp;#39;s such a fantastic book, i feel like they didn&amp;#39;t even give it a chance.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lju2w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 1, 
                    "id": "c2lp43d", 
                    "name": "t1_c2lp43d"
                }
            ], 
            "banned_by": null, 
            "downs": 1, 
            "created": 1316630448.0, 
            "created_utc": 1316630448.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On python-forum.org, we had someone ask for help with their script a while ago, and they posted code extremely similar to this, saying they got it from somewhere else.&lt;/p&gt;\n\n&lt;p&gt;Here is the thread: &lt;a href=\"http://www.python-forum.org/pythonforum/viewtopic.php?f=1&amp;amp;t=27111\"&gt;http://www.python-forum.org/pythonforum/viewtopic.php?f=1&amp;amp;t=27111&lt;/a&gt;. In the .py file in the .zip attachment, there is a function which looks pretty much identical to the code posted.&lt;/p&gt;\n\n&lt;p&gt;I wonder was the person who originally wrote the code in the linked article the same person who came to python-forum.org for help, or did he just rip the code from there?&lt;/p&gt;\n\n&lt;p&gt;EDIT: &lt;a href=\"http://www.governmentsecurity.org/forum/index.php?showtopic=26829\"&gt;This&lt;/a&gt; appears to be where the code originally surfaced. I wonder does the guy know his code is famous...&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 20, 
            "id": "c2lju2w", 
            "name": "t1_c2lju2w"
        }, 
        {
            "body": "Holy crap, that thing is O( n^15 ) in terms of runtime!  This is a perfect example of why you should use [hashlib](http://docs.python.org/library/hashlib.html) to generate your passwords instead of rolling your own.  ", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "voipme", 
            "replies": [
                {
                    "body": "Nobody inspects the spammish repetition", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "TearsOfScarlet", 
                    "banned_by": null, 
                    "downs": 6, 
                    "created": 1316628006.0, 
                    "created_utc": 1316628006.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nobody inspects the spammish repetition&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljfdw", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 31, 
                    "id": "c2ljh3t", 
                    "name": "t1_c2ljh3t"
                }, 
                {
                    "body": "Hey, at least it's NP-easy. (That is not a real thing but you know what I mean.)", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "MTGandP", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316656842.0, 
                    "created_utc": 1316656842.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey, at least it&amp;#39;s NP-easy. (That is not a real thing but you know what I mean.)&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljfdw", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 3, 
                    "id": "c2lnkp8", 
                    "name": "t1_c2lnkp8"
                }, 
                {
                    "body": "No, you shouldn't; you should use bcrypt. Here's a [Python implementation of bcrypt](http://pypi.python.org/pypi/py-bcrypt/).", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "gthank", 
                    "replies": [
                        {
                            "body": "This isn't password hashing, its password *generation*.\n\nI'm presuming they would take this file and hand out the passwords one by one to users.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "true_religion", 
                            "replies": [
                                {
                                    "body": "You're right, I wouldn't recommend either one for password *generation*, but `bcrypt` is no worse than `hashlib` for the purpose. I'd rather `hashlib` never got associated with passwords at all.\n\nFor password generation, you probably can't beat a passphrase, and if you aren't allowed a long enough string for that, then try picking off just the first letters of a memorable sentence or two, then doing 1337 transformations (selectively) and adding a symbol or two. That will probably get you a password you can remember while giving you decent resistance to (online) dictionary attacks. ", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "gthank", 
                                    "replies": [
                                        {
                                            "body": "If an attacker is successfully executing the millions of online attempts it would take to hack a short lowercase password, the character set limitation isn't really factoring into the security (even a 5 character password chosen from a-z should take millions of attempts to guess).\n\nI don't mean to suggest that people should avoid using symbols, just that they probably don't need to focus on them.", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "maxerickson", 
                                            "replies": [
                                                {
                                                    "body": "A couple of things:\n\n* I don't trust most places to do a good job of implementing security, given the widespread &lt;20 char limits on passwords.\n* Lots of places *require* you to use mixed case, numbers, and/or symbols, so there's a fair chance you're not imposing any burden on yourself that the software wouldn't already impose on you.\n\nThat said: I agree. If it's possible for an online dictionary attack to work, then the software is doing it wrong.", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "gthank", 
                                                    "replies": [
                                                        {
                                                            "body": "If you don't trust their security, how is a stronger password going to change anything? I certainly wouldn't share anything I considered sensitive over system I had fundamental misgivings about. I'll admit there is some middle ground around things like forum passwords (where it is a bummer to lose the account, but not a 'real' problem), but I prefer generating those and then storing them in a password safe (or on paper in a notebook) to trying to come up with anything on my own.\n\nAs far as brain-dead policies, getting as many people as possible up to speed on what exactly is brain dead about them is one of the more likely ways of actually changing anything. So it isn't about the burden, it is about the thought process that says that non-random replacement is useful.", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "maxerickson", 
                                                            "replies": [
                                                                {
                                                                    "body": "I don't give sensitive information unless I really need to, but I'd rather not  lose anything if I could avoid it. I, too, use a password safe, but lots of people don't, so having a good heuristic can't hurt.", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "gthank", 
                                                                    "banned_by": null, 
                                                                    "downs": 0, 
                                                                    "created": 1316715772.0, 
                                                                    "created_utc": 1316715772.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t give sensitive information unless I really need to, but I&amp;#39;d rather not  lose anything if I could avoid it. I, too, use a password safe, but lots of people don&amp;#39;t, so having a good heuristic can&amp;#39;t hurt.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2lrsd2", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 1, 
                                                                    "id": "c2lt7zp", 
                                                                    "name": "t1_c2lt7zp"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 0, 
                                                            "created": 1316706068.0, 
                                                            "created_utc": 1316706068.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you don&amp;#39;t trust their security, how is a stronger password going to change anything? I certainly wouldn&amp;#39;t share anything I considered sensitive over system I had fundamental misgivings about. I&amp;#39;ll admit there is some middle ground around things like forum passwords (where it is a bummer to lose the account, but not a &amp;#39;real&amp;#39; problem), but I prefer generating those and then storing them in a password safe (or on paper in a notebook) to trying to come up with anything on my own.&lt;/p&gt;\n\n&lt;p&gt;As far as brain-dead policies, getting as many people as possible up to speed on what exactly is brain dead about them is one of the more likely ways of actually changing anything. So it isn&amp;#39;t about the burden, it is about the thought process that says that non-random replacement is useful.&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2lrkpt", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 1, 
                                                            "id": "c2lrsd2", 
                                                            "name": "t1_c2lrsd2"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 0, 
                                                    "created": 1316704537.0, 
                                                    "created_utc": 1316704537.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A couple of things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I don&amp;#39;t trust most places to do a good job of implementing security, given the widespread &amp;lt;20 char limits on passwords.&lt;/li&gt;\n&lt;li&gt;Lots of places &lt;em&gt;require&lt;/em&gt; you to use mixed case, numbers, and/or symbols, so there&amp;#39;s a fair chance you&amp;#39;re not imposing any burden on yourself that the software wouldn&amp;#39;t already impose on you.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;That said: I agree. If it&amp;#39;s possible for an online dictionary attack to work, then the software is doing it wrong.&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lrb0p", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 1, 
                                                    "id": "c2lrkpt", 
                                                    "name": "t1_c2lrkpt"
                                                }
                                            ], 
                                            "banned_by": null, 
                                            "downs": 0, 
                                            "created": 1316702437.0, 
                                            "created_utc": 1316702437.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If an attacker is successfully executing the millions of online attempts it would take to hack a short lowercase password, the character set limitation isn&amp;#39;t really factoring into the security (even a 5 character password chosen from a-z should take millions of attempts to guess).&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t mean to suggest that people should avoid using symbols, just that they probably don&amp;#39;t need to focus on them.&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2lq99r", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 1, 
                                            "id": "c2lrb0p", 
                                            "name": "t1_c2lrb0p"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 1, 
                                    "created": 1316688501.0, 
                                    "created_utc": 1316688501.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re right, I wouldn&amp;#39;t recommend either one for password &lt;em&gt;generation&lt;/em&gt;, but &lt;code&gt;bcrypt&lt;/code&gt; is no worse than &lt;code&gt;hashlib&lt;/code&gt; for the purpose. I&amp;#39;d rather &lt;code&gt;hashlib&lt;/code&gt; never got associated with passwords at all.&lt;/p&gt;\n\n&lt;p&gt;For password generation, you probably can&amp;#39;t beat a passphrase, and if you aren&amp;#39;t allowed a long enough string for that, then try picking off just the first letters of a memorable sentence or two, then doing 1337 transformations (selectively) and adding a symbol or two. That will probably get you a password you can remember while giving you decent resistance to (online) dictionary attacks. &lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2loij7", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 4, 
                                    "id": "c2lq99r", 
                                    "name": "t1_c2lq99r"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 1, 
                            "created": 1316663599.0, 
                            "created_utc": 1316663599.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This isn&amp;#39;t password hashing, its password &lt;em&gt;generation&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m presuming they would take this file and hand out the passwords one by one to users.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2lmi7j", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 6, 
                            "id": "c2loij7", 
                            "name": "t1_c2loij7"
                        }, 
                        {
                            "body": "Also a good suggestion.  To be honest, almost anything would be better than the code shown.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "voipme", 
                            "replies": [
                                {
                                    "body": "Definitely true.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "gthank", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316692822.0, 
                                    "created_utc": 1316692822.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Definitely true.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2lqfpw", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 1, 
                                    "id": "c2lqgn9", 
                                    "name": "t1_c2lqgn9"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316692340.0, 
                            "created_utc": 1316692340.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also a good suggestion.  To be honest, almost anything would be better than the code shown.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2lmi7j", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 2, 
                            "id": "c2lqfpw", 
                            "name": "t1_c2lqfpw"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 4, 
                    "created": 1316648917.0, 
                    "created_utc": 1316648917.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, you shouldn&amp;#39;t; you should use bcrypt. Here&amp;#39;s a &lt;a href=\"http://pypi.python.org/pypi/py-bcrypt/\"&gt;Python implementation of bcrypt&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljfdw", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 8, 
                    "id": "c2lmi7j", 
                    "name": "t1_c2lmi7j"
                }
            ], 
            "banned_by": null, 
            "downs": 2, 
            "created": 1316627678.0, 
            "created_utc": 1316627678.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Holy crap, that thing is O( n&lt;sup&gt;15&lt;/sup&gt; ) in terms of runtime!  This is a perfect example of why you should use &lt;a href=\"http://docs.python.org/library/hashlib.html\"&gt;hashlib&lt;/a&gt; to generate your passwords instead of rolling your own.  &lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 14, 
            "id": "c2ljfdw", 
            "name": "t1_c2ljfdw"
        }, 
        {
            "body": "It reminds me of [Langton's ant](https://secure.wikimedia.org/wikipedia/en/wiki/Langton%27s_ant) because of the \"highway\".", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "jabbalaci", 
            "replies": [
                {
                    "body": "TIL...thanks.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "Vorsorken", 
                    "replies": [
                        {
                            "body": "Here is a challenge if you are interested: [Problem 349](http://projecteuler.net/index.php?section=problems&amp;id=349).", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "jabbalaci", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316631286.0, 
                            "created_utc": 1316631286.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is a challenge if you are interested: &lt;a href=\"http://projecteuler.net/index.php?section=problems&amp;amp;id=349\"&gt;Problem 349&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljdqd", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 3, 
                            "id": "c2ljyeb", 
                            "name": "t1_c2ljyeb"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316627364.0, 
                    "created_utc": 1316627364.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TIL...thanks.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2liyy8", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 5, 
                    "id": "c2ljdqd", 
                    "name": "t1_c2ljdqd"
                }
            ], 
            "banned_by": null, 
            "downs": 1, 
            "created": 1316624506.0, 
            "created_utc": 1316624506.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It reminds me of &lt;a href=\"https://secure.wikimedia.org/wikipedia/en/wiki/Langton%27s_ant\"&gt;Langton&amp;#39;s ant&lt;/a&gt; because of the &amp;quot;highway&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 10, 
            "id": "c2liyy8", 
            "name": "t1_c2liyy8"
        }, 
        {
            "body": "And I thought the \"if not not not not bool:\" my co-worker found was bad...\n", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "Jwsonic", 
            "replies": [
                {
                    "body": "That's just him moonlighting in a doo-wop quartet.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "simtel20", 
                    "banned_by": null, 
                    "downs": 2, 
                    "created": 1316629292.0, 
                    "created_utc": 1316629292.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s just him moonlighting in a doo-wop quartet.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljcn7", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 8, 
                    "id": "c2ljnwu", 
                    "name": "t1_c2ljnwu"
                }
            ], 
            "banned_by": null, 
            "downs": 2, 
            "created": 1316627171.0, 
            "created_utc": 1316627171.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And I thought the &amp;quot;if not not not not bool:&amp;quot; my co-worker found was bad...&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 10, 
            "id": "c2ljcn7", 
            "name": "t1_c2ljcn7"
        }, 
        {
            "body": "I made the mistake of running it. It's created a 60 MB file so far.\n\nI think it could be worse, too....\n    genpassword(\"abc\", 3, \"derp.dat\", 3, False)", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "HazzyPls", 
            "replies": [
                {
                    "body": "You don't have a terminating element. If List=3, you must have a Z or the program ~~never halts~~ prints `|{a,b,c}|^15`, or 14 million lines.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "heyhermano", 
                    "banned_by": null, 
                    "downs": 1, 
                    "created": 1316628262.0, 
                    "created_utc": 1316628262.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You don&amp;#39;t have a terminating element. If List=3, you must have a Z or the program &lt;del&gt;never halts&lt;/del&gt; prints &lt;code&gt;|{a,b,c}|^15&lt;/code&gt;, or 14 million lines.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljf5j", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 7, 
                    "id": "c2ljifl", 
                    "name": "t1_c2ljifl"
                }
            ], 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316627631.0, 
            "created_utc": 1316627631.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I made the mistake of running it. It&amp;#39;s created a 60 MB file so far.&lt;/p&gt;\n\n&lt;p&gt;I think it could be worse, too....\n    genpassword(&amp;quot;abc&amp;quot;, 3, &amp;quot;derp.dat&amp;quot;, 3, False)&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 6, 
            "id": "c2ljf5j", 
            "name": "t1_c2ljf5j"
        }, 
        {
            "body": "I think this is considered \"art\" in some places...", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "rm9402", 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316636545.0, 
            "created_utc": 1316636545.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think this is considered &amp;quot;art&amp;quot; in some places...&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 5, 
            "id": "c2lkqu8", 
            "name": "t1_c2lkqu8"
        }, 
        {
            "body": "Way to go. This could perfectly reasonably be done in a single line...", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "larsga", 
            "replies": [
                {
                    "body": "How exactly would you do this in a single line? ", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "subheight640", 
                    "replies": [
                        {
                            "body": "It'd be a lot easier to crack this nut if we knew what *this* is trying to do.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "HazzyPls", 
                            "replies": [
                                {
                                    "body": "My thinking was that it's making passwords. It doesn't matter how it's doing it. You just need to make a good password.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "larsga", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316629972.0, 
                                    "created_utc": 1316629972.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My thinking was that it&amp;#39;s making passwords. It doesn&amp;#39;t matter how it&amp;#39;s doing it. You just need to make a good password.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljdvz", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 2, 
                                    "id": "c2ljri7", 
                                    "name": "t1_c2ljri7"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316627396.0, 
                            "created_utc": 1316627396.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;d be a lot easier to crack this nut if we knew what &lt;em&gt;this&lt;/em&gt; is trying to do.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljccj", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 10, 
                            "id": "c2ljdvz", 
                            "name": "t1_c2ljdvz"
                        }, 
                        {
                            "body": "`itertools.permutations`", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "Justinsaccount", 
                            "replies": [
                                {
                                    "body": "Nope. You need to perform a k-permutation **with repetition**. `itertools.permutations` performs a k-permutation; a permutation will never pick, for instance, \"ZZb\" and \"bZZ\" -- which this code does. I don't think Python has a built-in for repeating permutations.\n\nActually, because of the insanely odd termination rules, this resists a one-line answer. If you call the function with `('aZb', 3, 'test.out', 6, True)`, the output will terminate at ZZZ and will never continue to the Bs. If, instead, you call it with `('abZ', 3, 'test.out', 6, True)`, it continues on.\n\nEDIT: Fixed per simtel20, thanks!\n\nDOUBLE EDIT: [Check out krunk7's one-liner above](http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljs45)", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "heyhermano", 
                                    "replies": [
                                        {
                                            "body": "itertools.combinations_with_replacement() http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljngc", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "simtel20", 
                                            "replies": [
                                                {
                                                    "body": "No. A combination with replacement is **not** the same as a permutation with replacement.", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "heyhermano", 
                                                    "replies": [
                                                        {
                                                            "body": "I'd appreciate it if you could expand on that a bit.  I'm reading the example from the link I posted:\n\n&gt; combinations_with_replacement('ABCD', 2)\n\nresults in \n\n&gt; AA AB AC AD BB BC BD CC CD DD\n\nwhich looks like this function will, in fact, create ZZZ.  However this isn't my strong suite so I'd love to have the distinction clarified.\n\nThanks!\n", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "simtel20", 
                                                            "replies": [
                                                                {
                                                                    "body": "That was a *terrible* example on my part, which I've now fixed.\n\nConsider `w = {a,b,Z}`. How many 2 digit strings can I make using those letters?\n\nAnswer: {aa, ab, aZ, ba, bb, bZ, Za, Zb, ZZ} are all valid.\n\nNote that in English, aZ is *not* the same as Za. Order matters! But a combination means order is irrelevant. A combination with replacement will not give me both 'aZ' and 'Za' -- it'll only give me one of those. Thus we must use a permutation with replacement.", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "heyhermano", 
                                                                    "replies": [
                                                                        {
                                                                            "body": "If I'm reading this correctly, then it would be valid to use:\n\n    w = ('a', 'b', 'Z')\n    a = itertools.product(w, w)\n\nThe result is :\n\n    print [ foo for foo in a ]\n    [('a', 'a'), ('a', 'b'), ('a', 'Z'), ('b', 'a'), ('b', 'b'), ('b', 'Z'), ('Z', 'a'), ('Z', 'b'), ('Z', 'Z')]\n\nThe permutation with replacement as you've described so far seems to describe the cartesian product.  Am I understanding you correctly? ", 
                                                                            "subreddit_id": "t5_2qh0y", 
                                                                            "num_reports": null, 
                                                                            "author_flair_css_class": null, 
                                                                            "author": "simtel20", 
                                                                            "replies": [
                                                                                {
                                                                                    "body": "&gt;The permutation with replacement as you've described so far seems to describe the cartesian product. Am I understanding you correctly?\n\nFor distinguishable elements in the set, absolutely. Note that given a set W, and some integer `n&lt;|W|` we can observe that `\\prod_{i=1}^{n} |W| = |W|*|W|*...*|W| = |W|^n = |P(|W|, n)| with repetition`.\n\nThis means that `|P(|W|, 3) with repetition` for your W is P(3,3), or |WxWxW|.\n\nIt won't hold, however, for a W containing indistinguishable elements (i.e, W={'m', 'o', 'm'}), but that's likely not going to occur in this case.", 
                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                    "num_reports": null, 
                                                                                    "author_flair_css_class": null, 
                                                                                    "author": "heyhermano", 
                                                                                    "banned_by": null, 
                                                                                    "downs": 0, 
                                                                                    "created": 1316638390.0, 
                                                                                    "created_utc": 1316638390.0, 
                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The permutation with replacement as you&amp;#39;ve described so far seems to describe the cartesian product. Am I understanding you correctly?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For distinguishable elements in the set, absolutely. Note that given a set W, and some integer &lt;code&gt;n&amp;lt;|W|&lt;/code&gt; we can observe that &lt;code&gt;\\prod_{i=1}^{n} |W| = |W|*|W|*...*|W| = |W|^n = |P(|W|, n)| with repetition&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This means that &lt;code&gt;|P(|W|, 3) with repetition&lt;/code&gt; for your W is P(3,3), or |WxWxW|.&lt;/p&gt;\n\n&lt;p&gt;It won&amp;#39;t hold, however, for a W containing indistinguishable elements (i.e, W={&amp;#39;m&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;m&amp;#39;}), but that&amp;#39;s likely not going to occur in this case.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                    "subreddit": "Python", 
                                                                                    "parent_id": "t1_c2lknht", 
                                                                                    "approved_by": null, 
                                                                                    "likes": null, 
                                                                                    "author_flair_text": null, 
                                                                                    "link_id": "t3_kmur4", 
                                                                                    "ups": 1, 
                                                                                    "id": "c2ll0q2", 
                                                                                    "name": "t1_c2ll0q2"
                                                                                }
                                                                            ], 
                                                                            "banned_by": null, 
                                                                            "downs": 1, 
                                                                            "created": 1316635943.0, 
                                                                            "created_utc": 1316635943.0, 
                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If I&amp;#39;m reading this correctly, then it would be valid to use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;w = (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;Z&amp;#39;)\na = itertools.product(w, w)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result is :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;print [ foo for foo in a ]\n[(&amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;Z&amp;#39;, &amp;#39;a&amp;#39;), (&amp;#39;Z&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;Z&amp;#39;, &amp;#39;Z&amp;#39;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The permutation with replacement as you&amp;#39;ve described so far seems to describe the cartesian product.  Am I understanding you correctly? &lt;/p&gt;\n&lt;/div&gt;", 
                                                                            "subreddit": "Python", 
                                                                            "parent_id": "t1_c2ljrkw", 
                                                                            "approved_by": null, 
                                                                            "likes": null, 
                                                                            "author_flair_text": null, 
                                                                            "link_id": "t3_kmur4", 
                                                                            "ups": 3, 
                                                                            "id": "c2lknht", 
                                                                            "name": "t1_c2lknht"
                                                                        }
                                                                    ], 
                                                                    "banned_by": null, 
                                                                    "downs": 1, 
                                                                    "created": 1316629984.0, 
                                                                    "created_utc": 1316629984.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That was a &lt;em&gt;terrible&lt;/em&gt; example on my part, which I&amp;#39;ve now fixed.&lt;/p&gt;\n\n&lt;p&gt;Consider &lt;code&gt;w = {a,b,Z}&lt;/code&gt;. How many 2 digit strings can I make using those letters?&lt;/p&gt;\n\n&lt;p&gt;Answer: {aa, ab, aZ, ba, bb, bZ, Za, Zb, ZZ} are all valid.&lt;/p&gt;\n\n&lt;p&gt;Note that in English, aZ is &lt;em&gt;not&lt;/em&gt; the same as Za. Order matters! But a combination means order is irrelevant. A combination with replacement will not give me both &amp;#39;aZ&amp;#39; and &amp;#39;Za&amp;#39; -- it&amp;#39;ll only give me one of those. Thus we must use a permutation with replacement.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2ljpq9", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 1, 
                                                                    "id": "c2ljrkw", 
                                                                    "name": "t1_c2ljrkw"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 0, 
                                                            "created": 1316629630.0, 
                                                            "created_utc": 1316629630.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d appreciate it if you could expand on that a bit.  I&amp;#39;m reading the example from the link I posted:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;combinations_with_replacement(&amp;#39;ABCD&amp;#39;, 2)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;results in &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;AA AB AC AD BB BC BD CC CD DD&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;which looks like this function will, in fact, create ZZZ.  However this isn&amp;#39;t my strong suite so I&amp;#39;d love to have the distinction clarified.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2ljo57", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 2, 
                                                            "id": "c2ljpq9", 
                                                            "name": "t1_c2ljpq9"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 3, 
                                                    "created": 1316629330.0, 
                                                    "created_utc": 1316629330.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No. A combination with replacement is &lt;strong&gt;not&lt;/strong&gt; the same as a permutation with replacement.&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2ljnqu", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 4, 
                                                    "id": "c2ljo57", 
                                                    "name": "t1_c2ljo57"
                                                }
                                            ], 
                                            "banned_by": null, 
                                            "downs": 0, 
                                            "created": 1316629255.0, 
                                            "created_utc": 1316629255.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;itertools.combinations_with_replacement() &lt;a href=\"http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljngc\"&gt;http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljngc&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2ljhqn", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 2, 
                                            "id": "c2ljnqu", 
                                            "name": "t1_c2ljnqu"
                                        }, 
                                        {
                                            "body": "ah, yeah, I knew there was something in itertools that did it", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "Justinsaccount", 
                                            "banned_by": null, 
                                            "downs": 2, 
                                            "created": 1316631810.0, 
                                            "created_utc": 1316631810.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ah, yeah, I knew there was something in itertools that did it&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2ljhqn", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 2, 
                                            "id": "c2lk19i", 
                                            "name": "t1_c2lk19i"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316628127.0, 
                                    "created_utc": 1316628127.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope. You need to perform a k-permutation &lt;strong&gt;with repetition&lt;/strong&gt;. &lt;code&gt;itertools.permutations&lt;/code&gt; performs a k-permutation; a permutation will never pick, for instance, &amp;quot;ZZb&amp;quot; and &amp;quot;bZZ&amp;quot; -- which this code does. I don&amp;#39;t think Python has a built-in for repeating permutations.&lt;/p&gt;\n\n&lt;p&gt;Actually, because of the insanely odd termination rules, this resists a one-line answer. If you call the function with &lt;code&gt;(&amp;#39;aZb&amp;#39;, 3, &amp;#39;test.out&amp;#39;, 6, True)&lt;/code&gt;, the output will terminate at ZZZ and will never continue to the Bs. If, instead, you call it with &lt;code&gt;(&amp;#39;abZ&amp;#39;, 3, &amp;#39;test.out&amp;#39;, 6, True)&lt;/code&gt;, it continues on.&lt;/p&gt;\n\n&lt;p&gt;EDIT: Fixed per simtel20, thanks!&lt;/p&gt;\n\n&lt;p&gt;DOUBLE EDIT: &lt;a href=\"http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/c2ljs45\"&gt;Check out krunk7&amp;#39;s one-liner above&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljesb", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 5, 
                                    "id": "c2ljhqn", 
                                    "name": "t1_c2ljhqn"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 5, 
                            "created": 1316627566.0, 
                            "created_utc": 1316627566.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;itertools.permutations&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljccj", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 15, 
                            "id": "c2ljesb", 
                            "name": "t1_c2ljesb"
                        }, 
                        {
                            "body": "I was wrong, sorry. I didn't notice that it was generating a whole list of passwords, and that there are some crazy-ass constraints that may or may not be significant.\n\nAnyway, making a password in a single line is easy:\n\n    def generate_password():\n        alphabet = string.letters + string.digits\n        return \"\".join([random.choice(alphabet) for ix in range(8)])\n", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "larsga", 
                            "replies": [
                                {
                                    "body": "That in one line:\n\n    lambda x: \"\".join(random.choice(string.letters + string.digits) for i in range(x))\n\nPlus this lets you specify how long you want the password.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": "", 
                                    "author": "AusIV", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316655477.0, 
                                    "created_utc": 1316655477.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That in one line:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lambda x: &amp;quot;&amp;quot;.join(random.choice(string.letters + string.digits) for i in range(x))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Plus this lets you specify how long you want the password.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljrdw", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": "Django", 
                                    "link_id": "t3_kmur4", 
                                    "ups": 1, 
                                    "id": "c2lndnc", 
                                    "name": "t1_c2lndnc"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316629946.0, 
                            "created_utc": 1316629946.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was wrong, sorry. I didn&amp;#39;t notice that it was generating a whole list of passwords, and that there are some crazy-ass constraints that may or may not be significant.&lt;/p&gt;\n\n&lt;p&gt;Anyway, making a password in a single line is easy:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def generate_password():\n    alphabet = string.letters + string.digits\n    return &amp;quot;&amp;quot;.join([random.choice(alphabet) for ix in range(8)])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljccj", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 3, 
                            "id": "c2ljrdw", 
                            "name": "t1_c2ljrdw"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 2, 
                    "created": 1316627098.0, 
                    "created_utc": 1316627098.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How exactly would you do this in a single line? &lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lj28f", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 5, 
                    "id": "c2ljccj", 
                    "name": "t1_c2ljccj"
                }
            ], 
            "banned_by": null, 
            "downs": 3, 
            "created": 1316625163.0, 
            "created_utc": 1316625163.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Way to go. This could perfectly reasonably be done in a single line...&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 9, 
            "id": "c2lj28f", 
            "name": "t1_c2lj28f"
        }, 
        {
            "body": "Which is why kids, you should spend some time reading through the Python standard library.", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": "", 
            "author": "Howardula", 
            "replies": [
                {
                    "body": "The library's huge!  I normally just Google \"python [thing I want to do]\" and find a library for it, standard or otherwise.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "xiongchiamiov", 
                    "replies": [
                        {
                            "body": "I usually do that hut just skimming through the library helps me come across tools that are rather helpful from time to time. This and also the many python packages out there.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": "", 
                            "author": "Howardula", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316668868.0, 
                            "created_utc": 1316668868.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I usually do that hut just skimming through the library helps me come across tools that are rather helpful from time to time. This and also the many python packages out there.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2lp2as", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": "Biological modeling and other stuff", 
                            "link_id": "t3_kmur4", 
                            "ups": 1, 
                            "id": "c2lp46c", 
                            "name": "t1_c2lp46c"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316668365.0, 
                    "created_utc": 1316668365.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The library&amp;#39;s huge!  I normally just Google &amp;quot;python [thing I want to do]&amp;quot; and find a library for it, standard or otherwise.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lnuwf", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 3, 
                    "id": "c2lp2as", 
                    "name": "t1_c2lp2as"
                }
            ], 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316658734.0, 
            "created_utc": 1316658734.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Which is why kids, you should spend some time reading through the Python standard library.&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": "Biological modeling and other stuff", 
            "link_id": "t3_kmur4", 
            "ups": 3, 
            "id": "c2lnuwf", 
            "name": "t1_c2lnuwf"
        }, 
        {
            "body": "Had to look to make sure some of mine hadn't escaped :)", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "gnit", 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316624740.0, 
            "created_utc": 1316624740.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Had to look to make sure some of mine hadn&amp;#39;t escaped :)&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 2, 
            "id": "c2lj037", 
            "name": "t1_c2lj037"
        }, 
        {
            "body": "Or have there been others I don't know about?", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "cocoon56", 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316621951.0, 
            "created_utc": 1316621951.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Or have there been others I don&amp;#39;t know about?&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 1, 
            "id": "c2lilsm", 
            "name": "t1_c2lilsm"
        }, 
        {
            "body": "wow.  ", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "epicviking", 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316626346.0, 
            "created_utc": 1316626346.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;wow.  &lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 1, 
            "id": "c2lj8cw", 
            "name": "t1_c2lj8cw"
        }, 
        {
            "body": "I didn't think you needed to declare (or initialize) variables like that in Python....", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "HazzyPls", 
            "replies": [
                {
                    "body": "You do if you want to perform type specific functions to a variable.  For example, you can't just do:\n\n    for i in list:\n        foo.append(i)\n\nwithout first declaring foo:\n\n    foo = []\n\nSo on occasion, you will need to declare an empty dict/string in order to perform dict/string operations later.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "schplat", 
                    "replies": [
                        {
                            "body": "It is not declaring but creating. Python cannot guess on which object you want to append ;)", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "audaxxx", 
                            "replies": [
                                {
                                    "body": "Well, initializing, which was more targeted to his question, than actual declaration of type.  I chose the wrong word there.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "schplat", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316646975.0, 
                                    "created_utc": 1316646975.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, initializing, which was more targeted to his question, than actual declaration of type.  I chose the wrong word there.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2lm3lk", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 4, 
                                    "id": "c2lm8o4", 
                                    "name": "t1_c2lm8o4"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316645947.0, 
                            "created_utc": 1316645947.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is not declaring but creating. Python cannot guess on which object you want to append ;)&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2lk30f", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 4, 
                            "id": "c2lm3lk", 
                            "name": "t1_c2lm3lk"
                        }, 
                        {
                            "body": "The line of i# = 0 was more along what I was thinking.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "HazzyPls", 
                            "banned_by": null, 
                            "downs": 0, 
                            "created": 1316661680.0, 
                            "created_utc": 1316661680.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The line of i# = 0 was more along what I was thinking.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2lk30f", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 1, 
                            "id": "c2lo9pj", 
                            "name": "t1_c2lo9pj"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316632153.0, 
                    "created_utc": 1316632153.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You do if you want to perform type specific functions to a variable.  For example, you can&amp;#39;t just do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i in list:\n    foo.append(i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;without first declaring foo:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;foo = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So on occasion, you will need to declare an empty dict/string in order to perform dict/string operations later.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lja49", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 7, 
                    "id": "c2lk30f", 
                    "name": "t1_c2lk30f"
                }, 
                {
                    "body": "You don't. Not at all.  Never. Ever.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "simtel20", 
                    "banned_by": null, 
                    "downs": 3, 
                    "created": 1316629388.0, 
                    "created_utc": 1316629388.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You don&amp;#39;t. Not at all.  Never. Ever.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2lja49", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 3, 
                    "id": "c2ljoes", 
                    "name": "t1_c2ljoes"
                }
            ], 
            "banned_by": null, 
            "downs": 1, 
            "created": 1316626692.0, 
            "created_utc": 1316626692.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I didn&amp;#39;t think you needed to declare (or initialize) variables like that in Python....&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 2, 
            "id": "c2lja49", 
            "name": "t1_c2lja49"
        }, 
        {
            "body": "There has to be a timing attack in there somewhere. ", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "HumanSuitcase", 
            "banned_by": null, 
            "downs": 0, 
            "created": 1316687924.0, 
            "created_utc": 1316687924.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There has to be a timing attack in there somewhere. &lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 1, 
            "id": "c2lq8er", 
            "name": "t1_c2lq8er"
        }, 
        {
            "body": "This is an obviously pathological example, but it does show a basic weakness in Python syntax: it's up to the human to make sure all the indentations are consistent with the meaning of the algorithm. If the human makes an indentation error, Python will blindly follow what was typed, not necessarily what was meant.\n\nWhile writing Python code, every so often I trace a program bug to an error in indentation that would otherwise have escaped my attention. In languages with explicit scope delimiters you can write a \"beautifier\" that detects some kinds of syntactical inconsistencies and focuses one's attention on program structure.\n\nI actually wrote a \"beautifier\" for Python [now posted on my Website](http://www.arachnoid.com/python/pybeautify_program.html) that is almost completely useless, because it can only detect the most obvious kinds of indentation errors, and doesn't really beautify or correct anything.\n\nThe obvious solution to this problem is to break Python code into small functions and avoid any serious dependence on structures whose complex indentation might come back to bite you.\n", 
            "subreddit_id": "t5_2qh0y", 
            "num_reports": null, 
            "author_flair_css_class": null, 
            "author": "lutusp", 
            "replies": [
                {
                    "body": "This is an obviously pathological example, but it does show a basic weakness in C syntax: it's up to the human to make sure all the scope delimiters are consistent with the meaning of the algorithm. If the human makes a scope delimiter error, C will blindly follow what was typed, not necessarily what was meant.", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "Justinsaccount", 
                    "replies": [
                        {
                            "body": "You're missing the point. In C, if you omit a delimiter the compiler will complain. And if you position a logical block between the wrong delimiters, it's obvious on inspection, especially after applying a beautifier. Further, most modern code editors will highlight a delimiter and its opposite partner, simplifying the task of sorting out code logic.\n\nIn Python you can't examine delimiters to discover that a logical block is misplaced, because there aren't any.", 
                            "subreddit_id": "t5_2qh0y", 
                            "num_reports": null, 
                            "author_flair_css_class": null, 
                            "author": "lutusp", 
                            "replies": [
                                {
                                    "body": "I'm not missing the point :-P\n\nc:\n\n    if(foo)\n        bar();\n        baz();\n\npython:\n\n    if foo:\n        bar()\n        baz()\n\nthe C version doesn't do what you want, but as you said, a code formatter will 'fix' the indentation.\n\nthe python version just does what you want..\n\nIn my experience the only people that ever complain about indentation in python are the people who write code like \n\n    def check_user(username):\n        ok = False\n        if activated(username):\n            if not disabled(username):\n                if not locked(username):\n                    if not flagged(username):\n                        ok = True\n                    else:\n                        log(\"flagged\")\n                else:\n                    log(\"Locked\")\n            else:\n                log(\"Disabled\")\n        else:\n            log(\"not active\")\n\n        return ok\n\ninstead of the more sane\n        \n    def check_user(username):\n        if not activated(username):\n            log(\"not active\")\n            return False\n\n        if disabled(username):\n            log(\"disabled\")\n            return False\n\n        if locked(username):\n            log(\"locked\")\n            return False\n\n        if flagged(username)\":\n            log(\"flagged\")\n            return False\n\n        return True\n\nsomewhat of a contrived example, but I see code like that all the time.  I think part of it comes from people\nthat were told that functions should only ever have one return statement.\n", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "Justinsaccount", 
                                    "replies": [
                                        {
                                            "body": "&gt; the C version doesn't do what you want ...\n\nI'll say -- as well as being syntactically ambiguous.\n\n&gt; I think part of it comes from people that were told that functions should only ever have one return statement.\n\nYes. Mathematicians, or people who want their code to be readable and maintainable.\n\n&gt; instead of the more sane ...\n\nA massive rationalization for a function with five exit points. The fact is that syntactical whitespace is one of Python's drawbacks. When Python programs were at most 15 lines in length, it didn't matter. Now it matters.\n\nDon't get me wrong. There is plenty to like about Python. To me personally, high productivity is near the top of the list. But the absence of block tokens represents a flaw.\n", 
                                            "subreddit_id": "t5_2qh0y", 
                                            "num_reports": null, 
                                            "author_flair_css_class": null, 
                                            "author": "lutusp", 
                                            "replies": [
                                                {
                                                    "body": "There's literally nothing bizarre, untoward, or unseemly about multiple return statements in either Python or C. Look through the Python standard libraries. Look through the C libraries for the Linux kernel.\n\nProgramming isn't a purity test, and multiple return statements are perfectly easy to read and maintain. ", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "Makido", 
                                                    "replies": [
                                                        {
                                                            "body": "&gt; Programming isn't a purity test\n\nThat depends. How many lives are you willing to lose? [SOFTWARE HORROR STORIES](http://www.cs.tau.ac.il/~nachumd/horror.html)\n", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "lutusp", 
                                                            "replies": [
                                                                {
                                                                    "body": "I don't see anything in your link relevant to our discussion. Always using a single return statement does not prevent you from making other stupid errors.\n", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "Makido", 
                                                                    "replies": [
                                                                        {
                                                                            "body": "&gt; I don't see anything in your link relevant to our discussion.\n\nReally? You said \"Programming isn't a purity test\". But it is. A high level of coding discipline is required to make programs that don't kill people. Functions that have multiple exits are bad coding practice. Your reply is that they're common. That's true, but beside the point.\n\n&gt; Always using a single return statement does not prevent you from making other stupid errors.\n\nTrue, and a different topic.\n", 
                                                                            "subreddit_id": "t5_2qh0y", 
                                                                            "num_reports": null, 
                                                                            "author_flair_css_class": null, 
                                                                            "author": "lutusp", 
                                                                            "replies": [
                                                                                {
                                                                                    "body": "&gt; Functions that have multiple exits are bad coding practice\n\nThis simply isn't true. Can you provide any documentation supporting that statement? Even PEP-8 has \"good\" examples with multiple exits.", 
                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                    "num_reports": null, 
                                                                                    "author_flair_css_class": null, 
                                                                                    "author": "Aramgutang", 
                                                                                    "replies": [
                                                                                        {
                                                                                            "body": "From hundreds of examples:\n\n[Coding Tip: Have A Single Exit Point](http://www.tomdalling.com/blog/coding-tips/coding-tip-have-a-single-exit-point)\n\n[Single Function Exit Point](http://c2.com/cgi/wiki?SingleFunctionExitPoint)", 
                                                                                            "subreddit_id": "t5_2qh0y", 
                                                                                            "num_reports": null, 
                                                                                            "author_flair_css_class": null, 
                                                                                            "author": "lutusp", 
                                                                                            "replies": [
                                                                                                {
                                                                                                    "body": "The arguments made in those article don't seem to be very applicable to Python. Here are some reasons as to why:\n\n* Python has garbage collection. This means that we never have to worry about freeing memory or destroying anything before exiting a function.\n* Python has constructs like \"with\" and \"finally\", which allow us to not have to worry about freeing locks or closing sockets either.\n* Python has exceptions. Any \"raise\" statement is by definition an exit point. Surely they shouldn't all be grouped at the end of a function.\n* Python has generators, where \"yield\" statements are technically exit points, which by definition occur somewhere in the middle of a function.\n\nMultiple exit points don't hurt readability either, as some articles like to claim. People read code from top to bottom, not from bottom to top. The sooner they're able to figure out they don't need to read any further, the better.", 
                                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                                    "num_reports": null, 
                                                                                                    "author_flair_css_class": null, 
                                                                                                    "author": "Aramgutang", 
                                                                                                    "banned_by": null, 
                                                                                                    "downs": 0, 
                                                                                                    "created": 1316696347.0, 
                                                                                                    "created_utc": 1316696347.0, 
                                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The arguments made in those article don&amp;#39;t seem to be very applicable to Python. Here are some reasons as to why:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python has garbage collection. This means that we never have to worry about freeing memory or destroying anything before exiting a function.&lt;/li&gt;\n&lt;li&gt;Python has constructs like &amp;quot;with&amp;quot; and &amp;quot;finally&amp;quot;, which allow us to not have to worry about freeing locks or closing sockets either.&lt;/li&gt;\n&lt;li&gt;Python has exceptions. Any &amp;quot;raise&amp;quot; statement is by definition an exit point. Surely they shouldn&amp;#39;t all be grouped at the end of a function.&lt;/li&gt;\n&lt;li&gt;Python has generators, where &amp;quot;yield&amp;quot; statements are technically exit points, which by definition occur somewhere in the middle of a function.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Multiple exit points don&amp;#39;t hurt readability either, as some articles like to claim. People read code from top to bottom, not from bottom to top. The sooner they&amp;#39;re able to figure out they don&amp;#39;t need to read any further, the better.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                    "subreddit": "Python", 
                                                                                                    "parent_id": "t1_c2lq8rf", 
                                                                                                    "approved_by": null, 
                                                                                                    "likes": null, 
                                                                                                    "author_flair_text": null, 
                                                                                                    "link_id": "t3_kmur4", 
                                                                                                    "ups": 4, 
                                                                                                    "id": "c2lqp41", 
                                                                                                    "name": "t1_c2lqp41"
                                                                                                }
                                                                                            ], 
                                                                                            "banned_by": null, 
                                                                                            "downs": 4, 
                                                                                            "created": 1316688168.0, 
                                                                                            "created_utc": 1316688168.0, 
                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;From hundreds of examples:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.tomdalling.com/blog/coding-tips/coding-tip-have-a-single-exit-point\"&gt;Coding Tip: Have A Single Exit Point&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://c2.com/cgi/wiki?SingleFunctionExitPoint\"&gt;Single Function Exit Point&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                            "subreddit": "Python", 
                                                                                            "parent_id": "t1_c2lpikz", 
                                                                                            "approved_by": null, 
                                                                                            "likes": null, 
                                                                                            "author_flair_text": null, 
                                                                                            "link_id": "t3_kmur4", 
                                                                                            "ups": 5, 
                                                                                            "id": "c2lq8rf", 
                                                                                            "name": "t1_c2lq8rf"
                                                                                        }
                                                                                    ], 
                                                                                    "banned_by": null, 
                                                                                    "downs": 0, 
                                                                                    "created": 1316673251.0, 
                                                                                    "created_utc": 1316673251.0, 
                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Functions that have multiple exits are bad coding practice&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This simply isn&amp;#39;t true. Can you provide any documentation supporting that statement? Even PEP-8 has &amp;quot;good&amp;quot; examples with multiple exits.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                    "subreddit": "Python", 
                                                                                    "parent_id": "t1_c2loshg", 
                                                                                    "approved_by": null, 
                                                                                    "likes": null, 
                                                                                    "author_flair_text": null, 
                                                                                    "link_id": "t3_kmur4", 
                                                                                    "ups": 4, 
                                                                                    "id": "c2lpikz", 
                                                                                    "name": "t1_c2lpikz"
                                                                                }, 
                                                                                {
                                                                                    "body": "My reply is not just that they're common, but that they're common in some of the most complex and widely-used open source projects that exist.", 
                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                    "num_reports": null, 
                                                                                    "author_flair_css_class": null, 
                                                                                    "author": "Makido", 
                                                                                    "replies": [
                                                                                        {
                                                                                            "body": "How does this argue that it's good coding practice? It isn't. There are laws against murder, but this doesn't prevent it from being a popular pastime.", 
                                                                                            "subreddit_id": "t5_2qh0y", 
                                                                                            "num_reports": null, 
                                                                                            "author_flair_css_class": null, 
                                                                                            "author": "lutusp", 
                                                                                            "replies": [
                                                                                                {
                                                                                                    "body": "I didn't say it was a good coding practice. What I'm saying is it's not a bad coding practice. You seem to want to be puritan about this, insisting that there's some law from on high dictating that multiple return statements are utterly anathema. Yet when I point out that some of the most high-profile, highly-tested code in existence uses them all over the place, you change the subject.\n\nThis goes back to one of my original statements: Programming is not a purity test.  Multiple return statements can be bad. But so can single return statements. It depends on what you're doing. Seems reasonable to me, but apparently I'm not too convincing. C'est la vie", 
                                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                                    "num_reports": null, 
                                                                                                    "author_flair_css_class": null, 
                                                                                                    "author": "Makido", 
                                                                                                    "replies": [
                                                                                                        {
                                                                                                            "body": "&gt; Yet when I point out that some of the most high-profile, highly-tested code in existence uses them all over the place, you change the subject.\n\nI *did not* change the subject, I *addressed* the subject. The first time you did this, I said you were trying to change the subject. I said, \"True, and a different topic.\" Same answer here -- the fact that people do it is not an argument, it's a diversion.\n\nI know what times I'm living in when a self-evident argument for coding discipline is downvoted.\n", 
                                                                                                            "subreddit_id": "t5_2qh0y", 
                                                                                                            "num_reports": null, 
                                                                                                            "author_flair_css_class": null, 
                                                                                                            "author": "lutusp", 
                                                                                                            "replies": [
                                                                                                                {
                                                                                                                    "body": "Sorry, it's not a different topic. You say a thing is a best practice. No one practices it. Therefore it's not a best practice. Simple as that. \n\nSelf-evident? That's your clue right there that you have no good justification for believing this dogma. Things are either true or they're not true, and when they're true, they're true for a reason. Unless you're arguing that this rule is somehow encoded into the fabric of the universe -- in which case, forgive my sinful ways.\n\nCoding discipline is not a goal in and of itself. Someone who has a lot of bad programming habits has coding discipline. What does that say? Positively nothing. ", 
                                                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                                                    "num_reports": null, 
                                                                                                                    "author_flair_css_class": null, 
                                                                                                                    "author": "Makido", 
                                                                                                                    "replies": [
                                                                                                                        {
                                                                                                                            "body": "&gt; Sorry, it's not a different topic ...\n\nYes, it is. I start by saying [and proving](http://c2.com/cgi/wiki?SingleFunctionExitPoint) that it's bad coding practice. Your reply is that everyone does it. Different topic. Everyone drinks and drives.  Everyone gets fat. And so forth. Popularity is not a measure of merit.\n\n&gt; Coding discipline is not a goal in and of itself. \n\nYou don't debate much, do you? The topic is coding discipline and best practices.\n\n&gt;Unless you're arguing that this rule is somehow encoded into the fabric of the universe -- in which case, forgive my sinful ways.\n\nHonest to God. Try addressing the topic.\n", 
                                                                                                                            "subreddit_id": "t5_2qh0y", 
                                                                                                                            "num_reports": null, 
                                                                                                                            "author_flair_css_class": null, 
                                                                                                                            "author": "lutusp", 
                                                                                                                            "replies": [
                                                                                                                                {
                                                                                                                                    "body": "I can Google \"single exit point\" and get c2.com/cgi/wiki?SingleFunctionExitPoint as the first result just as well as you can. Is this supposed to be convincing? Do you really have any reasons for believing this voodoo nonsense? Or are we just having an internet argument where you refuse to be wrong? I've given you two high-profile, highly-used examples of software that extensively utilize the very practice you say is utterly verboten. You give me some 10 year old FAQ page from a small consultancy company that probably doesn't even exist anymore.", 
                                                                                                                                    "subreddit_id": "t5_2qh0y", 
                                                                                                                                    "num_reports": null, 
                                                                                                                                    "author_flair_css_class": null, 
                                                                                                                                    "author": "Makido", 
                                                                                                                                    "replies": [
                                                                                                                                        {
                                                                                                                                            "body": "&gt; Do you really have any reasons for believing this voodoo nonsense? \n\nThat's not the question. The question is whether you can find an counterargument to a well-established principle of computer science. Your having resorted to of rhetoric like \"voodoo science\" suggests not.\n\n&gt; You give me some 10 year old FAQ page from a small consultancy company that probably doesn't even exist anymore.\n\nOn the basis of that stellar argument, Einstein's Theory of Relativity ought to have expired by now. No? Maybe you need to learn principles of debate.\n\nThe fact that something is widely practiced is not an argument in its favor. Science is not a popularity contest, it is a scheme where useful ideas prevail over useless ones, but not right away, and not when people try to argue for ideas based on popularity.\n", 
                                                                                                                                            "subreddit_id": "t5_2qh0y", 
                                                                                                                                            "num_reports": null, 
                                                                                                                                            "author_flair_css_class": null, 
                                                                                                                                            "author": "lutusp", 
                                                                                                                                            "banned_by": null, 
                                                                                                                                            "downs": 0, 
                                                                                                                                            "created": 1317714516.0, 
                                                                                                                                            "created_utc": 1317714516.0, 
                                                                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Do you really have any reasons for believing this voodoo nonsense? &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s not the question. The question is whether you can find an counterargument to a well-established principle of computer science. Your having resorted to of rhetoric like &amp;quot;voodoo science&amp;quot; suggests not.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;You give me some 10 year old FAQ page from a small consultancy company that probably doesn&amp;#39;t even exist anymore.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;On the basis of that stellar argument, Einstein&amp;#39;s Theory of Relativity ought to have expired by now. No? Maybe you need to learn principles of debate.&lt;/p&gt;\n\n&lt;p&gt;The fact that something is widely practiced is not an argument in its favor. Science is not a popularity contest, it is a scheme where useful ideas prevail over useless ones, but not right away, and not when people try to argue for ideas based on popularity.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                                                            "subreddit": "Python", 
                                                                                                                                            "parent_id": "t1_c2onfmf", 
                                                                                                                                            "approved_by": null, 
                                                                                                                                            "likes": null, 
                                                                                                                                            "author_flair_text": null, 
                                                                                                                                            "link_id": "t3_kmur4", 
                                                                                                                                            "ups": 1, 
                                                                                                                                            "id": "c2oprls", 
                                                                                                                                            "name": "t1_c2oprls"
                                                                                                                                        }
                                                                                                                                    ], 
                                                                                                                                    "banned_by": null, 
                                                                                                                                    "downs": 0, 
                                                                                                                                    "created": 1317693773.0, 
                                                                                                                                    "created_utc": 1317693773.0, 
                                                                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can Google &amp;quot;single exit point&amp;quot; and get c2.com/cgi/wiki?SingleFunctionExitPoint as the first result just as well as you can. Is this supposed to be convincing? Do you really have any reasons for believing this voodoo nonsense? Or are we just having an internet argument where you refuse to be wrong? I&amp;#39;ve given you two high-profile, highly-used examples of software that extensively utilize the very practice you say is utterly verboten. You give me some 10 year old FAQ page from a small consultancy company that probably doesn&amp;#39;t even exist anymore.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                                                    "subreddit": "Python", 
                                                                                                                                    "parent_id": "t1_c2mtkzc", 
                                                                                                                                    "approved_by": null, 
                                                                                                                                    "likes": null, 
                                                                                                                                    "author_flair_text": null, 
                                                                                                                                    "link_id": "t3_kmur4", 
                                                                                                                                    "ups": 1, 
                                                                                                                                    "id": "c2onfmf", 
                                                                                                                                    "name": "t1_c2onfmf"
                                                                                                                                }
                                                                                                                            ], 
                                                                                                                            "banned_by": null, 
                                                                                                                            "downs": 1, 
                                                                                                                            "created": 1317085851.0, 
                                                                                                                            "created_utc": 1317085851.0, 
                                                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Sorry, it&amp;#39;s not a different topic ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes, it is. I start by saying &lt;a href=\"http://c2.com/cgi/wiki?SingleFunctionExitPoint\"&gt;and proving&lt;/a&gt; that it&amp;#39;s bad coding practice. Your reply is that everyone does it. Different topic. Everyone drinks and drives.  Everyone gets fat. And so forth. Popularity is not a measure of merit.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Coding discipline is not a goal in and of itself. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You don&amp;#39;t debate much, do you? The topic is coding discipline and best practices.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Unless you&amp;#39;re arguing that this rule is somehow encoded into the fabric of the universe -- in which case, forgive my sinful ways.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Honest to God. Try addressing the topic.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                                            "subreddit": "Python", 
                                                                                                                            "parent_id": "t1_c2mtif4", 
                                                                                                                            "approved_by": null, 
                                                                                                                            "likes": null, 
                                                                                                                            "author_flair_text": null, 
                                                                                                                            "link_id": "t3_kmur4", 
                                                                                                                            "ups": 2, 
                                                                                                                            "id": "c2mtkzc", 
                                                                                                                            "name": "t1_c2mtkzc"
                                                                                                                        }
                                                                                                                    ], 
                                                                                                                    "banned_by": null, 
                                                                                                                    "downs": 0, 
                                                                                                                    "created": 1317085339.0, 
                                                                                                                    "created_utc": 1317085339.0, 
                                                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry, it&amp;#39;s not a different topic. You say a thing is a best practice. No one practices it. Therefore it&amp;#39;s not a best practice. Simple as that. &lt;/p&gt;\n\n&lt;p&gt;Self-evident? That&amp;#39;s your clue right there that you have no good justification for believing this dogma. Things are either true or they&amp;#39;re not true, and when they&amp;#39;re true, they&amp;#39;re true for a reason. Unless you&amp;#39;re arguing that this rule is somehow encoded into the fabric of the universe -- in which case, forgive my sinful ways.&lt;/p&gt;\n\n&lt;p&gt;Coding discipline is not a goal in and of itself. Someone who has a lot of bad programming habits has coding discipline. What does that say? Positively nothing. &lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                                    "subreddit": "Python", 
                                                                                                                    "parent_id": "t1_c2mtegc", 
                                                                                                                    "approved_by": null, 
                                                                                                                    "likes": null, 
                                                                                                                    "author_flair_text": null, 
                                                                                                                    "link_id": "t3_kmur4", 
                                                                                                                    "ups": 1, 
                                                                                                                    "id": "c2mtif4", 
                                                                                                                    "name": "t1_c2mtif4"
                                                                                                                }
                                                                                                            ], 
                                                                                                            "banned_by": null, 
                                                                                                            "downs": 1, 
                                                                                                            "created": 1317084538.0, 
                                                                                                            "created_utc": 1317084538.0, 
                                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Yet when I point out that some of the most high-profile, highly-tested code in existence uses them all over the place, you change the subject.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I &lt;em&gt;did not&lt;/em&gt; change the subject, I &lt;em&gt;addressed&lt;/em&gt; the subject. The first time you did this, I said you were trying to change the subject. I said, &amp;quot;True, and a different topic.&amp;quot; Same answer here -- the fact that people do it is not an argument, it&amp;#39;s a diversion.&lt;/p&gt;\n\n&lt;p&gt;I know what times I&amp;#39;m living in when a self-evident argument for coding discipline is downvoted.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                            "subreddit": "Python", 
                                                                                                            "parent_id": "t1_c2mtcsw", 
                                                                                                            "approved_by": null, 
                                                                                                            "likes": null, 
                                                                                                            "author_flair_text": null, 
                                                                                                            "link_id": "t3_kmur4", 
                                                                                                            "ups": 2, 
                                                                                                            "id": "c2mtegc", 
                                                                                                            "name": "t1_c2mtegc"
                                                                                                        }
                                                                                                    ], 
                                                                                                    "banned_by": null, 
                                                                                                    "downs": 0, 
                                                                                                    "created": 1317084206.0, 
                                                                                                    "created_utc": 1317084206.0, 
                                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I didn&amp;#39;t say it was a good coding practice. What I&amp;#39;m saying is it&amp;#39;s not a bad coding practice. You seem to want to be puritan about this, insisting that there&amp;#39;s some law from on high dictating that multiple return statements are utterly anathema. Yet when I point out that some of the most high-profile, highly-tested code in existence uses them all over the place, you change the subject.&lt;/p&gt;\n\n&lt;p&gt;This goes back to one of my original statements: Programming is not a purity test.  Multiple return statements can be bad. But so can single return statements. It depends on what you&amp;#39;re doing. Seems reasonable to me, but apparently I&amp;#39;m not too convincing. C&amp;#39;est la vie&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                                    "subreddit": "Python", 
                                                                                                    "parent_id": "t1_c2mf26l", 
                                                                                                    "approved_by": null, 
                                                                                                    "likes": null, 
                                                                                                    "author_flair_text": null, 
                                                                                                    "link_id": "t3_kmur4", 
                                                                                                    "ups": 1, 
                                                                                                    "id": "c2mtcsw", 
                                                                                                    "name": "t1_c2mtcsw"
                                                                                                }
                                                                                            ], 
                                                                                            "banned_by": null, 
                                                                                            "downs": 2, 
                                                                                            "created": 1316937862.0, 
                                                                                            "created_utc": 1316937862.0, 
                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How does this argue that it&amp;#39;s good coding practice? It isn&amp;#39;t. There are laws against murder, but this doesn&amp;#39;t prevent it from being a popular pastime.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                            "subreddit": "Python", 
                                                                                            "parent_id": "t1_c2mdlte", 
                                                                                            "approved_by": null, 
                                                                                            "likes": null, 
                                                                                            "author_flair_text": null, 
                                                                                            "link_id": "t3_kmur4", 
                                                                                            "ups": 2, 
                                                                                            "id": "c2mf26l", 
                                                                                            "name": "t1_c2mf26l"
                                                                                        }
                                                                                    ], 
                                                                                    "banned_by": null, 
                                                                                    "downs": 0, 
                                                                                    "created": 1316920665.0, 
                                                                                    "created_utc": 1316920665.0, 
                                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My reply is not just that they&amp;#39;re common, but that they&amp;#39;re common in some of the most complex and widely-used open source projects that exist.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                                    "subreddit": "Python", 
                                                                                    "parent_id": "t1_c2loshg", 
                                                                                    "approved_by": null, 
                                                                                    "likes": null, 
                                                                                    "author_flair_text": null, 
                                                                                    "link_id": "t3_kmur4", 
                                                                                    "ups": 2, 
                                                                                    "id": "c2mdlte", 
                                                                                    "name": "t1_c2mdlte"
                                                                                }
                                                                            ], 
                                                                            "banned_by": null, 
                                                                            "downs": 5, 
                                                                            "created": 1316665870.0, 
                                                                            "created_utc": 1316665870.0, 
                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t see anything in your link relevant to our discussion.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Really? You said &amp;quot;Programming isn&amp;#39;t a purity test&amp;quot;. But it is. A high level of coding discipline is required to make programs that don&amp;#39;t kill people. Functions that have multiple exits are bad coding practice. Your reply is that they&amp;#39;re common. That&amp;#39;s true, but beside the point.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Always using a single return statement does not prevent you from making other stupid errors.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;True, and a different topic.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                            "subreddit": "Python", 
                                                                            "parent_id": "t1_c2lon93", 
                                                                            "approved_by": null, 
                                                                            "likes": null, 
                                                                            "author_flair_text": null, 
                                                                            "link_id": "t3_kmur4", 
                                                                            "ups": 5, 
                                                                            "id": "c2loshg", 
                                                                            "name": "t1_c2loshg"
                                                                        }
                                                                    ], 
                                                                    "banned_by": null, 
                                                                    "downs": 0, 
                                                                    "created": 1316664675.0, 
                                                                    "created_utc": 1316664675.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t see anything in your link relevant to our discussion. Always using a single return statement does not prevent you from making other stupid errors.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2lnxn2", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 3, 
                                                                    "id": "c2lon93", 
                                                                    "name": "t1_c2lon93"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 3, 
                                                            "created": 1316659243.0, 
                                                            "created_utc": 1316659243.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Programming isn&amp;#39;t a purity test&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That depends. How many lives are you willing to lose? &lt;a href=\"http://www.cs.tau.ac.il/%7Enachumd/horror.html\"&gt;SOFTWARE HORROR STORIES&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2ln2tp", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 2, 
                                                            "id": "c2lnxn2", 
                                                            "name": "t1_c2lnxn2"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 0, 
                                                    "created": 1316653238.0, 
                                                    "created_utc": 1316653238.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s literally nothing bizarre, untoward, or unseemly about multiple return statements in either Python or C. Look through the Python standard libraries. Look through the C libraries for the Linux kernel.&lt;/p&gt;\n\n&lt;p&gt;Programming isn&amp;#39;t a purity test, and multiple return statements are perfectly easy to read and maintain. &lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lmqnx", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 10, 
                                                    "id": "c2ln2tp", 
                                                    "name": "t1_c2ln2tp"
                                                }, 
                                                {
                                                    "body": "&gt;A massive rationalization for a function with five exit points. \n\n    def check_user(username):\n        msg_test_pairs = (\n                          (\"not activated\", lambda x:not activated(x)),\n                          (\"disabled\", disabled),\n                          (\"locked\", locked),\n                          (\"flagged\", flagged)\n                         )\n        return not bool([log(msg) for msg, test in msg_test_pairs if test(username)])\n\nAnother way to perform the same thing. One indent level, custom indents, one return statement (although the hyper-indented version uses a return variable, which is exactly as bad), and two lines (split for readability). Maintainable/extendable, at least as easy to read as the hyper-indented version, and uses only builtins. \n\nAs `Justinsaccount` points out, you don't need block tokens if you don't write like a crazyman.", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "name_censored_", 
                                                    "replies": [
                                                        {
                                                            "body": "For that example it is a bit weird, but I do things like this all the time.. any time I realize I have a lot of repetitive if statements I try to figure out how to store the 'data' about the logic in a dictionary or list of tuples.  That usually simplifies the meat of the function to a simple dictionary lookup or for loop.  I forget what really popularized that, LISP?\n\nedit: so for that silly example function I would have wrote\n\n    for msg, test in msg_test_pairs:\n        if test(username):\n            log(msg)\n            return False\n        return True\n\nwhich mostly does the same thing... I guess use of any() would be more correct in your case.\n\nI also probably would have replaced activated with inactive or something which would have made all of the lambdas unnecessary. Also, lambda x: foo(x) == foo so (\"disabled\": disabled) does the same thing anyway.", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "Justinsaccount", 
                                                            "replies": [
                                                                {
                                                                    "body": "&gt;I forget what really popularized that, LISP?\n\nI always think of it as a result of first class functions, since it's talking about them as passable objects. I'm not sure what started first class functions, though LISP seems a likely candidate. You're right about the lambdas, I feel a bit stupid for not having noticed that. Fixed the code :)\n\nThe 'any' wouldn't always work, unless `log(msg)` always returns something `True`-ish (`True`-ish is any `x` where `bool(x)` == True). Since `log(msg)` must return *something* if called (even without an explicit `return`, it returns `None`), and because `bool(mylist)` returns `False` for empty lists and `True` for all others, it basically tests whether or not `log(msg)` was called at all (and it will be only if the `if test(username)` conditional is met). \n\nSo in other words, it doesn't matter what `log(msg)` returns - *if called*, it *will* return *something*, and therefore make the list non-empty, and therefore make the `bool()` return `True`. The list can only be empty if the `if test(username)` conditional was always `False`!\n\n(I also had to add a `not` there :( I can't seem to code today).", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "name_censored_", 
                                                                    "banned_by": null, 
                                                                    "downs": 0, 
                                                                    "created": 1316690072.0, 
                                                                    "created_utc": 1316690072.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I forget what really popularized that, LISP?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I always think of it as a result of first class functions, since it&amp;#39;s talking about them as passable objects. I&amp;#39;m not sure what started first class functions, though LISP seems a likely candidate. You&amp;#39;re right about the lambdas, I feel a bit stupid for not having noticed that. Fixed the code :)&lt;/p&gt;\n\n&lt;p&gt;The &amp;#39;any&amp;#39; wouldn&amp;#39;t always work, unless &lt;code&gt;log(msg)&lt;/code&gt; always returns something &lt;code&gt;True&lt;/code&gt;-ish (&lt;code&gt;True&lt;/code&gt;-ish is any &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;bool(x)&lt;/code&gt; == True). Since &lt;code&gt;log(msg)&lt;/code&gt; must return &lt;em&gt;something&lt;/em&gt; if called (even without an explicit &lt;code&gt;return&lt;/code&gt;, it returns &lt;code&gt;None&lt;/code&gt;), and because &lt;code&gt;bool(mylist)&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt; for empty lists and &lt;code&gt;True&lt;/code&gt; for all others, it basically tests whether or not &lt;code&gt;log(msg)&lt;/code&gt; was called at all (and it will be only if the &lt;code&gt;if test(username)&lt;/code&gt; conditional is met). &lt;/p&gt;\n\n&lt;p&gt;So in other words, it doesn&amp;#39;t matter what &lt;code&gt;log(msg)&lt;/code&gt; returns - &lt;em&gt;if called&lt;/em&gt;, it &lt;em&gt;will&lt;/em&gt; return &lt;em&gt;something&lt;/em&gt;, and therefore make the list non-empty, and therefore make the &lt;code&gt;bool()&lt;/code&gt; return &lt;code&gt;True&lt;/code&gt;. The list can only be empty if the &lt;code&gt;if test(username)&lt;/code&gt; conditional was always &lt;code&gt;False&lt;/code&gt;!&lt;/p&gt;\n\n&lt;p&gt;(I also had to add a &lt;code&gt;not&lt;/code&gt; there :( I can&amp;#39;t seem to code today).&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2lol22", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 1, 
                                                                    "id": "c2lqbo5", 
                                                                    "name": "t1_c2lqbo5"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 0, 
                                                            "created": 1316664165.0, 
                                                            "created_utc": 1316664165.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For that example it is a bit weird, but I do things like this all the time.. any time I realize I have a lot of repetitive if statements I try to figure out how to store the &amp;#39;data&amp;#39; about the logic in a dictionary or list of tuples.  That usually simplifies the meat of the function to a simple dictionary lookup or for loop.  I forget what really popularized that, LISP?&lt;/p&gt;\n\n&lt;p&gt;edit: so for that silly example function I would have wrote&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for msg, test in msg_test_pairs:\n    if test(username):\n        log(msg)\n        return False\n    return True\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which mostly does the same thing... I guess use of any() would be more correct in your case.&lt;/p&gt;\n\n&lt;p&gt;I also probably would have replaced activated with inactive or something which would have made all of the lambdas unnecessary. Also, lambda x: foo(x) == foo so (&amp;quot;disabled&amp;quot;: disabled) does the same thing anyway.&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2lo2eu", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 4, 
                                                            "id": "c2lol22", 
                                                            "name": "t1_c2lol22"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 1, 
                                                    "created": 1316660186.0, 
                                                    "created_utc": 1316660186.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;A massive rationalization for a function with five exit points. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;def check_user(username):\n    msg_test_pairs = (\n                      (&amp;quot;not activated&amp;quot;, lambda x:not activated(x)),\n                      (&amp;quot;disabled&amp;quot;, disabled),\n                      (&amp;quot;locked&amp;quot;, locked),\n                      (&amp;quot;flagged&amp;quot;, flagged)\n                     )\n    return not bool([log(msg) for msg, test in msg_test_pairs if test(username)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way to perform the same thing. One indent level, custom indents, one return statement (although the hyper-indented version uses a return variable, which is exactly as bad), and two lines (split for readability). Maintainable/extendable, at least as easy to read as the hyper-indented version, and uses only builtins. &lt;/p&gt;\n\n&lt;p&gt;As &lt;code&gt;Justinsaccount&lt;/code&gt; points out, you don&amp;#39;t need block tokens if you don&amp;#39;t write like a crazyman.&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lmqnx", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 4, 
                                                    "id": "c2lo2eu", 
                                                    "name": "t1_c2lo2eu"
                                                }, 
                                                {
                                                    "body": "Don't mathematicians like haskell? Haskell code often has tons of exit points. Haskell equivalent below (adding in the logging monad left as an exercise to the reader):\n\n    check_user username\n      | not (activated username) = false\n      | disabled username        = false\n      | locked username          = false\n      | flagged username         = false\n      | otherwise                = true\n\nI found the above python clear for the same reason the above haskell is clear.  Maybe if the function in question were more complicated I'd feel otherwise.", 
                                                    "subreddit_id": "t5_2qh0y", 
                                                    "num_reports": null, 
                                                    "author_flair_css_class": null, 
                                                    "author": "johnmcdonnell", 
                                                    "replies": [
                                                        {
                                                            "body": "Of course, Haskell junkies might be tempted to try something like this:\n\n check_user username = and [ x username | x &lt;- [ activated, not disabled, not locked, not flagged ] ]\n\n... which is admittedly awesome but probably less readable.", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "johnmcdonnell", 
                                                            "banned_by": null, 
                                                            "downs": 0, 
                                                            "created": 1316661498.0, 
                                                            "created_utc": 1316661498.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Of course, Haskell junkies might be tempted to try something like this:&lt;/p&gt;\n\n&lt;p&gt;check_user username = and [ x username | x &amp;lt;- [ activated, not disabled, not locked, not flagged ] ]&lt;/p&gt;\n\n&lt;p&gt;... which is admittedly awesome but probably less readable.&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2lo75t", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 2, 
                                                            "id": "c2lo8s2", 
                                                            "name": "t1_c2lo8s2"
                                                        }, 
                                                        {
                                                            "body": "&gt; Haskell code often has tons of exit points.\n\nI don't know where you got that idea -- it's a principle of structured programming to have functions with one entry and one exit point. [Coding Tip: Have A Single Exit Point](http://www.tomdalling.com/blog/coding-tips/coding-tip-have-a-single-exit-point) ... [Single Function Exit Point](http://c2.com/cgi/wiki?SingleFunctionExitPoint)\n", 
                                                            "subreddit_id": "t5_2qh0y", 
                                                            "num_reports": null, 
                                                            "author_flair_css_class": null, 
                                                            "author": "lutusp", 
                                                            "replies": [
                                                                {
                                                                    "body": "You don't know where I got the idea that Haskell code has a lot of exit points? I got the idea from [learnyouahaskell](http://learnyouahaskell.com/syntax-in-functions#guards-guards) and the [gentle guide to haskell](http://www.haskell.org/tutorial/patterns.html). The principle of multiple exit points is built into the language with several syntactic mechanisms dedicated to it. I'm well aware that there are some schools of programming that emphasize having only a single exit point, but it's clearly not the One True Path.\n\nYour [second link](http://c2.com/cgi/wiki?StructuredProgramming) actually makes my point for me. It refers to a religious adherence to single-exit-point coding as \"cargo cult coding\", and as it says, \"In practice, what should actually be forbidden is long, run-on functions. That rule actually fixes the problems the previous rules feebly attempt to fix!\"  As I said, \"Maybe if the function in question were more complicated I'd feel otherwise.\"\n\nIt's really just important that your function is clear. But that haskell code is clear as a bell and completely adheres to standard Haskell coding style. IMHO, the python code above is nearly as clear.", 
                                                                    "subreddit_id": "t5_2qh0y", 
                                                                    "num_reports": null, 
                                                                    "author_flair_css_class": null, 
                                                                    "author": "johnmcdonnell", 
                                                                    "banned_by": null, 
                                                                    "downs": 0, 
                                                                    "created": 1316704423.0, 
                                                                    "created_utc": 1316704423.0, 
                                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You don&amp;#39;t know where I got the idea that Haskell code has a lot of exit points? I got the idea from &lt;a href=\"http://learnyouahaskell.com/syntax-in-functions#guards-guards\"&gt;learnyouahaskell&lt;/a&gt; and the &lt;a href=\"http://www.haskell.org/tutorial/patterns.html\"&gt;gentle guide to haskell&lt;/a&gt;. The principle of multiple exit points is built into the language with several syntactic mechanisms dedicated to it. I&amp;#39;m well aware that there are some schools of programming that emphasize having only a single exit point, but it&amp;#39;s clearly not the One True Path.&lt;/p&gt;\n\n&lt;p&gt;Your &lt;a href=\"http://c2.com/cgi/wiki?StructuredProgramming\"&gt;second link&lt;/a&gt; actually makes my point for me. It refers to a religious adherence to single-exit-point coding as &amp;quot;cargo cult coding&amp;quot;, and as it says, &amp;quot;In practice, what should actually be forbidden is long, run-on functions. That rule actually fixes the problems the previous rules feebly attempt to fix!&amp;quot;  As I said, &amp;quot;Maybe if the function in question were more complicated I&amp;#39;d feel otherwise.&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s really just important that your function is clear. But that haskell code is clear as a bell and completely adheres to standard Haskell coding style. IMHO, the python code above is nearly as clear.&lt;/p&gt;\n&lt;/div&gt;", 
                                                                    "subreddit": "Python", 
                                                                    "parent_id": "t1_c2lotup", 
                                                                    "approved_by": null, 
                                                                    "likes": null, 
                                                                    "author_flair_text": null, 
                                                                    "link_id": "t3_kmur4", 
                                                                    "ups": 3, 
                                                                    "id": "c2lrk62", 
                                                                    "name": "t1_c2lrk62"
                                                                }
                                                            ], 
                                                            "banned_by": null, 
                                                            "downs": 6, 
                                                            "created": 1316666214.0, 
                                                            "created_utc": 1316666214.0, 
                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Haskell code often has tons of exit points.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&amp;#39;t know where you got that idea -- it&amp;#39;s a principle of structured programming to have functions with one entry and one exit point. &lt;a href=\"http://www.tomdalling.com/blog/coding-tips/coding-tip-have-a-single-exit-point\"&gt;Coding Tip: Have A Single Exit Point&lt;/a&gt; ... &lt;a href=\"http://c2.com/cgi/wiki?SingleFunctionExitPoint\"&gt;Single Function Exit Point&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", 
                                                            "subreddit": "Python", 
                                                            "parent_id": "t1_c2lo75t", 
                                                            "approved_by": null, 
                                                            "likes": null, 
                                                            "author_flair_text": null, 
                                                            "link_id": "t3_kmur4", 
                                                            "ups": 3, 
                                                            "id": "c2lotup", 
                                                            "name": "t1_c2lotup"
                                                        }
                                                    ], 
                                                    "banned_by": null, 
                                                    "downs": 1, 
                                                    "created": 1316661147.0, 
                                                    "created_utc": 1316661147.0, 
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Don&amp;#39;t mathematicians like haskell? Haskell code often has tons of exit points. Haskell equivalent below (adding in the logging monad left as an exercise to the reader):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;check_user username\n  | not (activated username) = false\n  | disabled username        = false\n  | locked username          = false\n  | flagged username         = false\n  | otherwise                = true\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I found the above python clear for the same reason the above haskell is clear.  Maybe if the function in question were more complicated I&amp;#39;d feel otherwise.&lt;/p&gt;\n&lt;/div&gt;", 
                                                    "subreddit": "Python", 
                                                    "parent_id": "t1_c2lmqnx", 
                                                    "approved_by": null, 
                                                    "likes": null, 
                                                    "author_flair_text": null, 
                                                    "link_id": "t3_kmur4", 
                                                    "ups": 4, 
                                                    "id": "c2lo75t", 
                                                    "name": "t1_c2lo75t"
                                                }
                                            ], 
                                            "banned_by": null, 
                                            "downs": 9, 
                                            "created": 1316650698.0, 
                                            "created_utc": 1316650698.0, 
                                            "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;the C version doesn&amp;#39;t do what you want ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;ll say -- as well as being syntactically ambiguous.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I think part of it comes from people that were told that functions should only ever have one return statement.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes. Mathematicians, or people who want their code to be readable and maintainable.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;instead of the more sane ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A massive rationalization for a function with five exit points. The fact is that syntactical whitespace is one of Python&amp;#39;s drawbacks. When Python programs were at most 15 lines in length, it didn&amp;#39;t matter. Now it matters.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t get me wrong. There is plenty to like about Python. To me personally, high productivity is near the top of the list. But the absence of block tokens represents a flaw.&lt;/p&gt;\n&lt;/div&gt;", 
                                            "subreddit": "Python", 
                                            "parent_id": "t1_c2ljuqt", 
                                            "approved_by": null, 
                                            "likes": null, 
                                            "author_flair_text": null, 
                                            "link_id": "t3_kmur4", 
                                            "ups": 5, 
                                            "id": "c2lmqnx", 
                                            "name": "t1_c2lmqnx"
                                        }
                                    ], 
                                    "banned_by": null, 
                                    "downs": 3, 
                                    "created": 1316630583.0, 
                                    "created_utc": 1316630583.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not missing the point :-P&lt;/p&gt;\n\n&lt;p&gt;c:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if(foo)\n    bar();\n    baz();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if foo:\n    bar()\n    baz()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the C version doesn&amp;#39;t do what you want, but as you said, a code formatter will &amp;#39;fix&amp;#39; the indentation.&lt;/p&gt;\n\n&lt;p&gt;the python version just does what you want..&lt;/p&gt;\n\n&lt;p&gt;In my experience the only people that ever complain about indentation in python are the people who write code like &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def check_user(username):\n    ok = False\n    if activated(username):\n        if not disabled(username):\n            if not locked(username):\n                if not flagged(username):\n                    ok = True\n                else:\n                    log(&amp;quot;flagged&amp;quot;)\n            else:\n                log(&amp;quot;Locked&amp;quot;)\n        else:\n            log(&amp;quot;Disabled&amp;quot;)\n    else:\n        log(&amp;quot;not active&amp;quot;)\n\n    return ok\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;instead of the more sane&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def check_user(username):\n    if not activated(username):\n        log(&amp;quot;not active&amp;quot;)\n        return False\n\n    if disabled(username):\n        log(&amp;quot;disabled&amp;quot;)\n        return False\n\n    if locked(username):\n        log(&amp;quot;locked&amp;quot;)\n        return False\n\n    if flagged(username)&amp;quot;:\n        log(&amp;quot;flagged&amp;quot;)\n        return False\n\n    return True\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;somewhat of a contrived example, but I see code like that all the time.  I think part of it comes from people\nthat were told that functions should only ever have one return statement.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljh5h", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 16, 
                                    "id": "c2ljuqt", 
                                    "name": "t1_c2ljuqt"
                                }, 
                                {
                                    "body": "So you can throw out this kind of PoS code and get back to real work.", 
                                    "subreddit_id": "t5_2qh0y", 
                                    "num_reports": null, 
                                    "author_flair_css_class": null, 
                                    "author": "simtel20", 
                                    "banned_by": null, 
                                    "downs": 0, 
                                    "created": 1316629345.0, 
                                    "created_utc": 1316629345.0, 
                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So you can throw out this kind of PoS code and get back to real work.&lt;/p&gt;\n&lt;/div&gt;", 
                                    "subreddit": "Python", 
                                    "parent_id": "t1_c2ljh5h", 
                                    "approved_by": null, 
                                    "likes": null, 
                                    "author_flair_text": null, 
                                    "link_id": "t3_kmur4", 
                                    "ups": 3, 
                                    "id": "c2ljo7q", 
                                    "name": "t1_c2ljo7q"
                                }
                            ], 
                            "banned_by": null, 
                            "downs": 7, 
                            "created": 1316628014.0, 
                            "created_utc": 1316628014.0, 
                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re missing the point. In C, if you omit a delimiter the compiler will complain. And if you position a logical block between the wrong delimiters, it&amp;#39;s obvious on inspection, especially after applying a beautifier. Further, most modern code editors will highlight a delimiter and its opposite partner, simplifying the task of sorting out code logic.&lt;/p&gt;\n\n&lt;p&gt;In Python you can&amp;#39;t examine delimiters to discover that a logical block is misplaced, because there aren&amp;#39;t any.&lt;/p&gt;\n&lt;/div&gt;", 
                            "subreddit": "Python", 
                            "parent_id": "t1_c2ljf5v", 
                            "approved_by": null, 
                            "likes": null, 
                            "author_flair_text": null, 
                            "link_id": "t3_kmur4", 
                            "ups": 9, 
                            "id": "c2ljh5h", 
                            "name": "t1_c2ljh5h"
                        }
                    ], 
                    "banned_by": null, 
                    "downs": 2, 
                    "created": 1316627633.0, 
                    "created_utc": 1316627633.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is an obviously pathological example, but it does show a basic weakness in C syntax: it&amp;#39;s up to the human to make sure all the scope delimiters are consistent with the meaning of the algorithm. If the human makes a scope delimiter error, C will blindly follow what was typed, not necessarily what was meant.&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljd3w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 22, 
                    "id": "c2ljf5v", 
                    "name": "t1_c2ljf5v"
                }, 
                {
                    "body": "&gt; The obvious solution to this problem is to break Python code into small functions and avoid any serious dependence on structures whose complex indentation might come back to bite you.\n\nHonestly, this is the obvious solution for any abstraction in any language, so you're not telling anything new here. 100 line functions, get off my lawn!", 
                    "subreddit_id": "t5_2qh0y", 
                    "num_reports": null, 
                    "author_flair_css_class": null, 
                    "author": "Leonidas_from_XIV", 
                    "banned_by": null, 
                    "downs": 0, 
                    "created": 1316651865.0, 
                    "created_utc": 1316651865.0, 
                    "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The obvious solution to this problem is to break Python code into small functions and avoid any serious dependence on structures whose complex indentation might come back to bite you.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Honestly, this is the obvious solution for any abstraction in any language, so you&amp;#39;re not telling anything new here. 100 line functions, get off my lawn!&lt;/p&gt;\n&lt;/div&gt;", 
                    "subreddit": "Python", 
                    "parent_id": "t1_c2ljd3w", 
                    "approved_by": null, 
                    "likes": null, 
                    "author_flair_text": null, 
                    "link_id": "t3_kmur4", 
                    "ups": 3, 
                    "id": "c2lmw5r", 
                    "name": "t1_c2lmw5r"
                }
            ], 
            "banned_by": null, 
            "downs": 12, 
            "created": 1316627246.0, 
            "created_utc": 1316627246.0, 
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is an obviously pathological example, but it does show a basic weakness in Python syntax: it&amp;#39;s up to the human to make sure all the indentations are consistent with the meaning of the algorithm. If the human makes an indentation error, Python will blindly follow what was typed, not necessarily what was meant.&lt;/p&gt;\n\n&lt;p&gt;While writing Python code, every so often I trace a program bug to an error in indentation that would otherwise have escaped my attention. In languages with explicit scope delimiters you can write a &amp;quot;beautifier&amp;quot; that detects some kinds of syntactical inconsistencies and focuses one&amp;#39;s attention on program structure.&lt;/p&gt;\n\n&lt;p&gt;I actually wrote a &amp;quot;beautifier&amp;quot; for Python &lt;a href=\"http://www.arachnoid.com/python/pybeautify_program.html\"&gt;now posted on my Website&lt;/a&gt; that is almost completely useless, because it can only detect the most obvious kinds of indentation errors, and doesn&amp;#39;t really beautify or correct anything.&lt;/p&gt;\n\n&lt;p&gt;The obvious solution to this problem is to break Python code into small functions and avoid any serious dependence on structures whose complex indentation might come back to bite you.&lt;/p&gt;\n&lt;/div&gt;", 
            "subreddit": "Python", 
            "parent_id": "t3_kmur4", 
            "approved_by": null, 
            "likes": null, 
            "author_flair_text": null, 
            "link_id": "t3_kmur4", 
            "ups": 9, 
            "id": "c2ljd3w", 
            "name": "t1_c2ljd3w"
        }
    ], 
    "score": 258, 
    "approved_by": null, 
    "over_18": false, 
    "hidden": false, 
    "thumbnail": "", 
    "subreddit_id": "t5_2qh0y", 
    "link_flair_css_class": null, 
    "author_flair_css_class": null, 
    "downs": 28, 
    "is_self": false, 
    "permalink": "http://www.reddit.com/r/Python/comments/kmur4/finally_a_piece_of_python_code_is_featured_in_the/", 
    "name": "t3_kmur4", 
    "created": 1316621935.0, 
    "url": "http://thedailywtf.com/Articles/Python-Charmer.aspx", 
    "author_flair_text": null, 
    "author": "cocoon56", 
    "created_utc": 1316621935.0, 
    "link_flair_text": null, 
    "media": null, 
    "num_reports": null, 
    "ups": 286
}