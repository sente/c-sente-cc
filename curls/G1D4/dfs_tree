.
├── A
│   ├── A
│   │   ├── A
│   │   └── B
│   └── B
│       ├── A
│       └── B
└── B
    ├── A
    │   ├── A
    │   └── B
    └── B
        ├── A
        └── B


node = {
         "A": {
           "A": {
             "A": {},
             "B": {}
           },
           "B": {
             "A": {},
             "B": {}
           }
         },
         "B": {
           "A": {
             "A": {},
             "B": {}
           },
           "B": {
             "A": {},
             "B": {}
           }
         }
       }




def dfs(node,count=0):
    node[str(count)]=count
    count = count + 1
    if 'B' in node:
        stack.append(('B', node['B']))
    if 'A' in node:
        stack.append(('A', node['A']))
    if stack:
        letter,node=stack.pop()
        print len(stack),letter
        dfs(node,count=count)



#####################################################################################

dfs(node)

#####################################################################################





{"0": 0,
 "A": {"1": 1,
       "A": {"2": 2,
             "A": {"3": 3},
             "B": {"4": 4}},
       "B": {"5": 5,
             "A": {"6": 6},
             "B": {"7": 7}}},
 "B": {"8": 8,
       "A": {"9": 9,
             "A": {"10": 10},
             "B": {"11": 11}},
       "B": {"12": 12,
             "A": {"13": 13},
             "B": {"14": 14}}}}




DIR     	1
DIR     A/	2
DIR     A/A/	2
DIR     A/A/A/	3
DIR     A/A/B/	4
DIR     A/B/	5
DIR     A/B/A/	6
DIR     A/B/B/	7
DIR     B/	8
DIR     B/A/	9
DIR     B/A/A/	10
DIR     B/A/B/	11
DIR     B/B/	12
DIR     B/B/A/	13
DIR     B/B/B/	14


